{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/activities/home/HomePage.tsx","app/layout/loadinComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfilEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/PrifilePage.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","console","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","serServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","userName","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","submitting","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","runInAction","map","x","setActivity","setPagination","setLoadingInitial","log","loadActivity","getActivity","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","Date","state","editActivity","updatedActivity","createActivity","attendee","newActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","loadingFollowings","followings","activeTab","userActivities","loadingActivities","setActivetab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setApploaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnecton","creareHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","navigate","useNavigate","Menu","inverted","fixed","Container","Item","as","NavLink","to","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","event","preventDefault","replace","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","RevealContent","visible","fluid","hidden","basic","e","handleFollow","Card","Content","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","userNAme","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useParams","SetActivity","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","Comment","resetForm","onKeyPress","shiftKey","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","Actions","Action","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","ProfileEditForm","setEditMode","ProfileAbout","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","overflow","ButtonGroup","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","ProfileContent","menuPosition","Statistic","Divider","LoadLogin","hideProgressBar","path","element","LoadActivities","location","useLocation","OtherRouters","ServerError","finally","ModalContainer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","StrictMode","Provider","document","getElementById"],"mappings":"ibAOaA,EAIT,WAAYC,EAASC,GAAwB,yBAH7CD,UAG4C,OAF5CC,gBAE4C,EACxCC,KAAKF,KAAOA,EACZE,KAAKD,WAAaA,GAIbE,EAIT,aAA2C,IAA/BC,EAA8B,uDAAjB,EAAGC,EAAc,uDAAH,EAAG,yBAH1CD,WAAa,EAG6B,KAF1CC,SAAW,EAGPH,KAAKE,WAAaA,EAClBF,KAAKG,SAAWA,GCTxBC,IAAMC,SAASC,QAAUC,OAEzBH,IAAMI,aAAaC,QAAQC,KAAI,SAAAC,GAC3B,IAAMC,EAAQC,EAAMC,YAAYF,MAGhC,OAFIA,GAASD,EAAOI,UAASJ,EAAOI,QAAQC,cAAf,iBAAyCJ,IAE/DD,KAGXP,IAAMI,aAAaS,SAASP,IAA5B,+BAAAQ,EAAA,MAAgC,WAAMD,GAAN,eAAAC,EAAA,iFAGlBnB,EAAakB,EAASF,QAAT,YAHK,uBAKpBE,EAASnB,KAAO,IAAID,EAAgBoB,EAASnB,KAAMqB,KAAKC,MAAMrB,IAL1C,kBAMbkB,GANa,gCAQjBA,GARiB,2CAAhC,uDASG,SAACI,GACA,MAA+BA,EAAMJ,SAA9BnB,EAAP,EAAOA,KAAMwB,EAAb,EAAaA,OAAQX,EAArB,EAAqBA,OACrB,OAAOW,GACH,KAAK,IAQD,GAPoB,kBAATxB,GACPyB,IAAMF,MAAMvB,GAEM,QAAlBa,EAAOa,QAAoB1B,EAAK2B,QAAQC,OAAOC,eAAe,OAC9DC,GAAQC,KAAK,cAGb/B,EAAK4B,OAAO,CACZ,IAAMI,EAAmB,GACzB,IAAK,IAAMC,KAAOjC,EAAK4B,OACf5B,EAAK4B,OAAOK,IACZD,EAAiBD,KAAK/B,EAAK4B,OAAOK,IAG1C,MAAMD,EAAiBE,OAE3B,MACJ,KAAK,IACDT,IAAMF,MAAM,gBACZ,MACJ,KAAK,IACDO,GAAQC,KAAK,cAGb,MACJ,KAAK,IAGDhB,EAAMC,YAAYmB,eAAenC,GAEjC8B,GAAQC,KAAK,iBAGrB,OAAOK,QAAQC,OAAOd,MAG1B,IAAMe,EAAe,SAAKnB,GAAL,OAAoCA,EAASnB,MAE5DuC,EACG,SAAIC,GAAJ,OAAoBlC,IAAMmC,IAAOD,GAAKE,KAAKJ,IAD9CC,EAEI,SAAIC,EAAaG,GAAjB,OAA8BrC,IAAMsC,KAAQJ,EAAKG,GAAMD,KAAKJ,IAFhEC,EAGG,SAAIC,EAAaG,GAAjB,OAA8BrC,IAAMuC,IAAOL,EAAKG,GAAMD,KAAKJ,IAH9DC,EAIG,SAAIC,GAAJ,OAAoBlC,IAAMwC,OAAUN,GAAKE,KAAKJ,IA4CxCS,EAND,CACVC,WApCe,CACfC,KAAM,SAACC,GAAD,OAA6B5C,IAAMmC,IAAiC,cAAe,CAACS,WACrFR,KAAKJ,IACVa,QAAS,SAACC,GAAD,OAAgBb,EAAA,sBAAsCa,KAC/DC,OAAQ,SAACC,GAAD,OAAkCf,EAAoB,cAAee,IAC7EC,OAAQ,SAACD,GAAD,OAAkCf,EAAA,sBAAkCe,EAASF,IAAME,IAC3FR,OAAQ,SAACM,GAAD,OAAgBb,EAAA,sBAAkCa,KAC1DI,OAAQ,SAACJ,GAAD,OAAgBb,EAAA,sBAAmCa,EAAnC,WAAgD,MA8BxEK,QA3BY,CACZC,QAAS,kBAAMnB,EAAmB,aAClCoB,MAAO,SAACC,GAAD,OAA0BrB,EAAoB,iBAAkBqB,IACvEC,SAAU,SAACD,GAAD,OAA0BrB,EAAoB,oBAAqBqB,KAyB7EE,SAtBa,CACbrB,IAAK,SAACsB,GAAD,OAAsBxB,EAAA,oBAAmCwB,KAC9DC,YAAa,SAACC,GACV,IAAIC,EAAW,IAAIC,SAEnB,OADAD,EAASE,OAAO,OAAQH,GACjB3D,IAAMsC,KAAY,SAAUsB,EAAU,CACzCjD,QAAS,CAAC,eAAgB,0BAGlCoD,aAAc,SAACjB,GAAD,OAAgBb,EAAA,kBAAyBa,EAAzB,YAAuC,KACrEkB,YAAa,SAAClB,GAAD,OAAgBb,EAAA,kBAAwBa,KACrDmB,cAAe,SAACC,GAAD,OAA+BjC,EAAA,YAA0BiC,IACxEC,gBAAiB,SAACV,GAAD,OAAsBxB,EAAA,kBAAyBwB,GAAY,KAC5EW,eAAgB,SAACX,EAAkBY,GAAnB,OACZpC,EAAA,kBAAmCwB,EAAnC,sBAAyDY,KAC7DC,eAAgB,SAACb,EAAkBY,GAAnB,OACZpC,EAAA,oBAA0CwB,EAA1C,iCAA2EY,OC/FtEE,EACT,WAAYC,GAA4B,oBACpCC,OAAOC,OAAO9E,KAAM4E,IAGfG,EAST,WAAY3B,GAA+B,yBAR3CF,QAAc8B,EAQ4B,KAP1CC,MAAgB,GAO0B,KAN1CC,SAAmB,GAMuB,KAL1CC,YAAsB,GAKoB,KAJ1CC,KAAoB,KAIsB,KAH1CC,KAAe,GAG2B,KAF1CC,MAAgB,GAGRlC,IACApD,KAAKkD,GAAKE,EAASF,GACnBlD,KAAKiF,MAAQ7B,EAAS6B,MACtBjF,KAAKkF,SAAW9B,EAAS8B,SACzBlF,KAAKmF,YAAc/B,EAAS+B,YAC5BnF,KAAKoF,KAAOhC,EAASgC,KACrBpF,KAAKsF,MAAQlC,EAASkC,MACtBtF,KAAKqF,KAAOjC,EAASiC,OC3BpBE,EACT,WAAY7B,GAAa,oBACrB1D,KAAK6D,SAAWH,EAAK8B,SACrBxF,KAAKyF,YAAc/B,EAAK+B,YACxBzF,KAAK0F,MAAQhC,EAAKgC,OCTLC,E,WAWjB,aAAc,IAAD,gCAVbC,iBAAmB,IAAIC,IAUV,KATbC,sBAAyCd,EAS5B,KARbe,UAAW,EAQE,KAPbC,SAAU,EAOG,KANbC,gBAAiB,EAMJ,KALbC,YAAa,EAKA,KAJbnG,WAAgC,KAInB,KAHboG,aAAe,IAAIlG,EAGN,KAFbwE,WAAY,IAAIoB,KAAMO,IAAI,OAAO,GAEpB,KAabC,gBAAkB,SAACF,GACf,EAAKA,aAAeA,GAdX,KAiBbG,aAAe,SAAC7B,EAAmB8B,GAC/B,IAAMC,EAAiB,WACnB,EAAK/B,UAAUgC,SAAQ,SAACF,EAAOxE,GACf,cAARA,GAAqB,EAAK0C,UAAU7B,OAAOb,OAGvD,OAAO0C,GACH,IAAK,MACD+B,IACA,EAAK/B,UAAU2B,IAAI,OAAO,GAC1B,MACJ,IAAK,UACDI,IACA,EAAK/B,UAAU2B,IAAI,WAAW,GAC9B,MACJ,IAAK,SACDI,IACA,EAAK/B,UAAU2B,IAAI,UAAU,GAC7B,MACJ,IAAK,YACD,EAAK3B,UAAU7B,OAAO,aACtB,EAAK6B,UAAU2B,IAAI,YAAaG,KAtC/B,KAyEbG,eAzEa,sBAyEI,4BAAAxF,EAAA,6DACb,EAAK+E,gBAAiB,EADT,kBAGYpD,EAAMC,WAAWC,KAAK,EAAK4D,aAHvC,OAGHC,EAHG,OAKTC,aAAY,WACRD,EAAO9G,KAAKgH,KAAI,SAAAC,GAAC,OACb,EAAKC,YAAYD,MAErB,EAAKE,cAAcL,EAAO7G,YAC1B,EAAKmH,mBAAkB,MAVlB,gDAaTL,aAAY,WACRpF,QAAQ0F,IAAR,MACA,EAAKD,mBAAkB,MAflB,yDAzEJ,KA6FbD,cAAgB,SAAClH,GACb,EAAKA,WAAaA,GA9FT,KAiGbqH,aAjGa,uCAiGE,WAAOlE,GAAP,eAAAhC,EAAA,2DACPkC,EAAW,EAAKiE,YAAYnE,IADrB,uBAGP,EAAK4C,iBAAmB1C,EAHjB,kBAIAA,GAJA,cAMP,EAAK8D,mBAAkB,GANhB,mBAQcrE,EAAMC,WAAWG,QAAQC,GARvC,eAQHE,EARG,OASH,EAAK4D,YAAY5D,GACjByD,aAAY,WACR,EAAKf,iBAAmB1C,KAE5B,EAAK8D,mBAAkB,GAbpB,kBAcI9D,GAdJ,kCAgBH3B,QAAQ0F,IAAR,MACA,EAAKD,mBAAkB,GAjBpB,0DAjGF,2DAsHLF,YAAc,SAAC5D,GACnB,IACS,EADHM,EAAO7C,EAAMyG,UAAU5D,KACzBA,IACAN,EAASmE,QAAUnE,EAASoE,UAAWC,MACnC,SAAAvG,GAAC,OAAIA,EAAE2C,WAAaH,EAAK8B,YAE7BpC,EAASsE,OAAStE,EAASuE,eAAiBjE,EAAK8B,SACjDpC,EAASwE,KAAT,UAAgBxE,EAASoE,iBAAzB,aAAgB,EAAoBK,MAAK,SAAAd,GAAC,OAAIA,EAAElD,WAAaT,EAASuE,iBAE1EvE,EAASgC,KAAO,IAAI0C,KAAK1E,EAASgC,MAClC,EAAKQ,iBAAiBQ,IAAIhD,EAASF,GAAIE,IAhI9B,KAmILiE,YAAc,SAACnE,GACnB,OAAO,EAAK0C,iBAAiBrD,IAAIW,IApIxB,KAuIbgE,kBAAoB,SAACa,GACjB,EAAK9B,eAAiB8B,GAxIb,KA2IbC,aA3Ia,uCA2IE,WAAO5E,GAAP,SAAAlC,EAAA,+EAGD2B,EAAMC,WAAWO,OAAOD,GAHvB,OAIPyD,aAAY,WACR,GAAIzD,EAASF,GAAI,CACb,IAAI+E,EAAe,2BAAO,EAAKZ,YAAYjE,EAASF,KAAQE,GAC5D,EAAKwC,iBAAiBQ,IAAIhD,EAASF,GAAI+E,GACvC,EAAKnC,iBAAmBmC,MARzB,+CAaPxG,QAAQ0F,IAAR,MAbO,wDA3IF,2DA4Jbe,eA5Ja,uCA4JI,WAAO9E,GAAP,mBAAAlC,EAAA,6DACPwC,EAAO7C,EAAMyG,UAAU5D,KACvByE,EAAW,IAAI5C,EAAQ7B,GAFhB,kBAKHb,EAAMC,WAAWK,OAAOC,GALrB,QAMHgF,EAAc,IAAIzD,EAASvB,IACrBuE,aAAejE,EAAM8B,SACjC4C,EAAYZ,UAAY,CAACW,GACzB,EAAKnB,YAAYoB,GAEjBvB,aAAY,WACR,EAAKf,iBAAmBsC,KAZnB,kDAeT3G,QAAQ0F,IAAR,MAfS,0DA5JJ,2DA+KbkB,eA/Ka,uCA+KI,WAAOnF,GAAP,SAAAhC,EAAA,6DACb,EAAK8E,SAAU,EADF,kBAIHnD,EAAMC,WAAWF,OAAOM,GAJrB,OAKT2D,aAAY,WACR,EAAKjB,iBAAiBhD,OAAOM,GAC7B,EAAK8C,SAAU,KAPV,gDAWTa,aAAY,WACR,EAAKb,SAAU,KAZV,yDA/KJ,2DAgMbsC,iBAhMa,sBAgMM,4BAAApH,EAAA,6DACTwC,EAAO7C,EAAMyG,UAAU5D,KAC7B,EAAKsC,SAAU,EAFA,kBAILnD,EAAMC,WAAWQ,OAAO,EAAKwC,iBAAkB5C,IAJ1C,OAKX2D,aAAY,WAAO,IAAD,EACd,aAAI,EAAKf,wBAAT,aAAI,EAAuByB,QAAQ,CAAC,IAAD,EAC/B,EAAKzB,iBAAiB0B,UAAtB,UACI,EAAK1B,iBAAiB0B,iBAD1B,aACI,EAAiCe,QAAO,SAAArH,GAAC,OAAIA,EAAE2C,YAAF,OAAeH,QAAf,IAAeA,OAAf,EAAeA,EAAM8B,aACtE,EAAKM,iBAAiByB,SAAU,MAC9B,CAAC,IAAD,IACIY,EAAW,IAAI5C,EAAQ7B,GAC7B,YAAKoC,wBAAL,mBAAuB0B,iBAAvB,SAAkC3F,KAAKsG,GACvC,EAAKrC,iBAAkByB,SAAU,EAErC,EAAK3B,iBAAiBQ,IAAI,EAAKN,iBAAkB5C,GAAI,EAAK4C,qBAfnD,gDAmBXrE,QAAQ0F,IAAR,MAnBW,yBAqBXN,aAAY,kBAAM,EAAKb,SAAU,KArBtB,4EAhMN,KAyNbwC,qBAzNa,sBAyNU,sBAAAtH,EAAA,6DACnB,EAAK8E,SAAU,EADI,kBAGTnD,EAAMC,WAAWQ,OAAO,EAAKwC,iBAAkB5C,IAHtC,OAIf2D,aAAY,WAAO,IAAD,EACd,EAAKf,iBAAkB2C,cAAc,UAAC,EAAK3C,wBAAN,aAAC,EAAuB2C,aAC7D,EAAK7C,iBAAiBQ,IAAI,EAAKN,iBAAkB5C,GAAI,EAAK4C,qBAN/C,gDASfrE,QAAQ0F,IAAR,MATe,yBAWfN,aAAa,kBAAM,EAAKb,SAAU,KAXnB,4EAzNV,KAyOb0C,sBAAwB,WACpB,EAAK5C,sBAAmBd,GA1Of,KA6Ob2D,wBAA0B,SAAC9E,GACvB,EAAK+B,iBAAiBa,SAAQ,SAAArD,GAAa,IAAD,EACtC,UAAAA,EAASoE,iBAAT,SAAoBf,SAAQ,SAAA0B,GACpBA,EAAStE,WAAaA,IACtBsE,EAASS,UAAYT,EAASU,iBAAmBV,EAASU,iBAC1DV,EAASS,WAAaT,EAASS,kBAjP3CE,YAAoB9I,MAEpB+I,aACI,kBAAM,EAAKtE,UAAUuE,UACrB,WACI,EAAK7C,aAAe,IAAIlG,EACxB,EAAK2F,iBAAiBqD,QACtB,EAAKvC,oB,6CAoCjB,WACI,IAAM1D,EAAS,IAAIkG,gBAUnB,OATAlG,EAAOkB,OAAO,aAAclE,KAAKmG,aAAajG,WAAWiJ,YACzDnG,EAAOkB,OAAO,WAAYlE,KAAKmG,aAAahG,SAASgJ,YACrDnJ,KAAKyE,UAAUgC,SAAQ,SAACF,EAAOxE,GACf,cAARA,EACAiB,EAAOkB,OAAOnC,EAAMwE,EAAe6C,eAEnCpG,EAAOkB,OAAOnC,EAAKwE,MAGpBvD,I,4BAGX,WACI,OAAOqG,MAAMC,KAAKtJ,KAAK4F,iBAAiB2D,UACnCC,MAAK,SAACtI,EAAEuI,GAAH,OAASvI,EAAEkE,KAAMsE,UAAYD,EAAErE,KAAMsE,e,6BAGnD,WACI,OAAO7E,OAAO8E,QACV3J,KAAK4J,iBAAiBC,QAAO,SAACC,EAAY1G,GACtC,IAAMgC,EAAO2E,kBAAO3G,EAASgC,KAAO,eAEpC,OADA0E,EAAW1E,GAAQ0E,EAAW1E,GAAX,sBAAuB0E,EAAW1E,IAAlC,CAAyChC,IAAY,CAACA,GAClE0G,IACT,S,qBCnFOE,E,WAWnB,aAAe,IAAD,gCAVd1F,QAA0B,KAUZ,KATd2F,gBAAiB,EASH,KARdC,WAAY,EAQE,KAPdlE,SAAU,EAOI,KANdmE,mBAAoB,EAMN,KALdC,WAAwB,GAKV,KAJdC,UAAY,EAIE,KAHdC,eAAiC,GAGnB,KAFdC,mBAAoB,EAEN,KAiBdC,aAAe,SAACH,GACd,EAAKA,UAAYA,GAlBL,KA6BdI,YA7Bc,uCA6BA,WAAO5G,GAAP,eAAA3C,EAAA,6DACZ,EAAK+I,gBAAiB,EADV,kBAGYpH,EAAMe,SAASrB,IAAIsB,GAH/B,OAGJS,EAHI,OAIVuC,aAAY,WACV,EAAKvC,QAAUA,EACf,EAAK2F,gBAAiB,KANd,gDASVxI,QAAQ0F,IAAR,MACAN,aAAY,kBAAO,EAAKoD,gBAAiB,KAV/B,yDA7BA,2DA2CdnG,YA3Cc,uCA2CA,WAAOC,GAAP,iBAAA7C,EAAA,6DACZ,EAAKgJ,WAAY,EADL,kBAGarH,EAAMe,SAASE,YAAYC,GAHxC,OAGJ9C,EAHI,OAIJyJ,EAAQzJ,EAASnB,KACvB+G,aAAY,WACS,IAAD,EAAd,EAAKvC,UACP,YAAKA,QAAQqG,cAAb,SAAqB9I,KAAK6I,GACtBA,EAAME,QAAU/J,EAAMyG,UAAU5D,OAClC7C,EAAMyG,UAAUuD,SAASH,EAAMpI,KAC/B,EAAKgC,QAAQoB,MAAQgF,EAAMpI,MAG/B,EAAK4H,WAAY,KAbT,gDAgBVzI,QAAQ0F,IAAR,MACAN,aAAY,kBAAO,EAAKqD,WAAY,KAjB1B,yDA3CA,2DAgEd/F,aAhEc,uCAgEC,WAAOuG,GAAP,SAAAxJ,EAAA,6DACb,EAAK8E,SAAU,EADF,kBAGLnD,EAAMe,SAASO,aAAauG,EAAMxH,IAH7B,OAIXrC,EAAMyG,UAAUuD,SAASH,EAAMpI,KAC/BuE,aAAY,WACN,EAAKvC,SAAW,EAAKA,QAAQqG,SAC/B,EAAKrG,QAAQqG,OAAO9C,MAAK,SAACiD,GAAD,OAAOA,EAAEF,UAASA,QAAS,EACpD,EAAKtG,QAAQqG,OAAO9C,MAAK,SAACiD,GAAD,OAAOA,EAAE5H,KAAOwH,EAAMxH,MAAK0H,QAAS,EAC7D,EAAKtG,QAAQoB,MAAQgF,EAAMpI,IAC3B,EAAK0D,SAAU,MAVR,gDAcXa,aAAY,kBAAO,EAAKb,SAAU,KAClCvE,QAAQ0F,IAAR,MAfW,yDAhED,2DAkFd/C,YAlFc,uCAkFA,WAAOsG,GAAP,SAAAxJ,EAAA,6DACZ,EAAK8E,SAAU,EADH,kBAGJnD,EAAMe,SAASQ,YAAYsG,EAAMxH,IAH7B,OAIV2D,aAAY,WACS,IAAD,IAAd,EAAKvC,UACP,EAAKA,QAAQqG,OAAb,UAAsB,EAAKrG,eAA3B,iBAAsB,EAAcqG,cAApC,aAAsB,EAAsBpC,QAC1C,SAACuC,GAAD,OAAOA,EAAE5H,KAAOwH,EAAMxH,OAG1B,EAAK8C,SAAU,KAVP,gDAaVa,aAAY,kBAAO,EAAKb,SAAU,KAClCvE,QAAQ0F,IAAR,MAdU,yDAlFA,2DAoGd9C,cApGc,uCAoGE,WAAOC,GAAP,SAAApD,EAAA,6DACd,EAAK8E,SAAU,EADD,kBAGNnD,EAAMe,SAASS,cAAcC,GAHvB,OAIZuC,aAAY,WAAO,IAAD,EAEdvC,EAAQmB,aACRnB,EAAQmB,eAAR,UAAwB5E,EAAMyG,UAAU5D,YAAxC,aAAwB,EAAsB+B,cAE9C5E,EAAMyG,UAAUyD,eAAezG,EAAQmB,aAEzC,EAAKnB,QAAL,2BAAoB,EAAKA,SAAaA,GACtC,EAAK0B,SAAU,KAZL,gDAeZvE,QAAQ0F,IAAR,MACAN,aAAY,kBAAO,EAAKb,SAAU,KAhBtB,yDApGF,2DAwHdzB,gBAxHc,uCAwHI,WAAOV,EAAkB+E,GAAzB,SAAA1H,EAAA,6DAChB,EAAK8E,SAAU,EADC,kBAGRnD,EAAMe,SAASW,gBAAgBV,GAHvB,OAIdhD,EAAMmK,cAAcrC,wBAAwB9E,GAC5CgD,aAAY,WAAO,IAAD,IAEd,EAAKvC,SACL,EAAKA,QAAQT,WAAb,UAAyBhD,EAAMyG,UAAU5D,YAAzC,aAAyB,EAAsB8B,WAC/C,EAAKlB,QAAQT,WAAaA,IAE1B+E,EACI,EAAKtE,QAAQuE,iBACb,EAAKvE,QAAQuE,iBACjB,EAAKvE,QAAQsE,WAAa,EAAKtE,QAAQsE,WAGrC,EAAKtE,SAAW,EAAKA,QAAQT,YAAb,UAA0BhD,EAAMyG,UAAU5D,YAA1C,aAA0B,EAAsB8B,YAClEoD,EAAY,EAAKtE,QAAQ2G,iBAAmB,EAAK3G,QAAQ2G,kBAG3D,EAAKb,WAAW3D,SAAQ,SAACnC,GACnBA,EAAQT,WAAaA,IACvBS,EAAQsE,UACJtE,EAAQuE,iBACRvE,EAAQuE,iBACZvE,EAAQsE,WAAatE,EAAQsE,cAGjC,EAAK5C,SAAU,KA7BH,gDAgCdvE,QAAQ0F,IAAR,MACAN,aAAY,kBAAO,EAAKb,SAAU,KAjCpB,yDAxHJ,6DA6JdkF,eA7Jc,uCA6JG,WAAOzG,GAAP,eAAAvD,EAAA,6DACf,EAAKiJ,mBAAoB,EADV,kBAIYtH,EAAMe,SAASY,eACtC,EAAKF,QAAST,SACdY,GANW,OAIP2F,EAJO,OAQbvD,aAAY,WACV,EAAKuD,WAAaA,EAClB,EAAKD,mBAAoB,KAVd,gDAab1I,QAAQ0F,IAAR,MACAN,aAAY,kBAAO,EAAKsD,mBAAoB,KAd/B,yDA7JH,2DA+KdgB,mBA/Kc,uCA+KO,WAAOtH,EAAkBY,GAAzB,eAAAvD,EAAA,6DACnB,EAAKqJ,mBAAoB,EADN,kBAIY1H,EAAMe,SAASc,eAAeb,EAAUY,GAJpD,OAIX6F,EAJW,OAKjBzD,aAAY,WACV,EAAKyD,eAAiBA,EACtB,EAAKC,mBAAoB,KAPV,gDAUjB9I,QAAQ0F,IAAR,MACAN,aAAY,kBAAO,EAAK0D,mBAAoB,KAX3B,yDA/KP,wDACZzB,YAAmB9I,MAEnB+I,aACE,kBAAM,EAAKsB,aACX,SAACA,GACA,GAAiB,GAAbA,GAA+B,GAAbA,EAAgB,CACnC,IAAM5F,EAAyB,GAAb4F,EAAiB,YAAc,YACjD,EAAKa,eAAezG,QAEpB,EAAK2F,WAAa,M,+CAW1B,WACE,SAAIvJ,EAAMyG,UAAU5D,OAAQ1D,KAAKsE,UACxBzD,EAAMyG,UAAU5D,KAAK8B,WAAaxF,KAAKsE,QAAQT,a,KCjCvCuH,E,WAGjB,aAAc,IAAD,gCAFb1H,KAAoB,KAEP,KAQbD,MARa,uCAQL,WAAO4H,GAAP,eAAAnK,EAAA,+EAGmB2B,EAAMU,QAAQE,MAAM4H,GAHvC,OAGM3H,EAHN,OAIA7C,EAAMC,YAAYwK,SAAS5H,EAAK9C,OAEhCiG,aAAY,kBAAM,EAAKnD,KAAOA,KAE9B7C,EAAM0K,WAAWC,aARjB,sDAWM/J,QAAQJ,QAXd,yDARK,2DAuBboK,OAAS,WACL5K,EAAMC,YAAYwK,SAAS,MAC3BI,OAAOC,aAAaC,WAAW,OAC/B,EAAKlI,KAAO,KACZ9B,GAAQC,KAAK,MA3BJ,KA8BbgK,QA9Ba,sBA8BH,4BAAA3K,EAAA,+EAEiB2B,EAAMU,QAAQC,UAF/B,OAEIE,EAFJ,OAGFmD,aAAY,kBAAM,EAAKnD,KAAOA,KAH5B,gDAKFjC,QAAQ0F,IAAR,MALE,yDA9BG,KAuCbxD,SAvCa,uCAuCF,WAAO0H,GAAP,eAAAnK,EAAA,+EAGgB2B,EAAMU,QAAQI,SAAS0H,GAHvC,OAGG3H,EAHH,OAIH7C,EAAMC,YAAYwK,SAAS5H,EAAK9C,OAEhCiG,aAAY,kBAAM,EAAKnD,KAAOA,KAE9B7C,EAAM0K,WAAWC,aARd,oHAvCE,2DAsDbX,SAAW,SAACnF,GACJ,EAAKhC,OAAM,EAAKA,KAAKgC,MAAQA,IAvDxB,KA0DbqF,eAAiB,SAACe,GACV,EAAKpI,OAAM,EAAKA,KAAK+B,YAAcqG,IA1DvChD,YAAmB9I,M,4CAGvB,WACI,QAASA,KAAK0D,S,KCGT7C,EAAe,CACxBmK,cAAe,IAAIrF,EACnB7E,YAAa,ICXb,aAAc,IAAD,gCAJbO,MAA4B,KAIf,KAHbT,MAAuB8K,OAAOC,aAAaI,QAAQ,OAGtC,KAFbC,WAAY,EAEC,KAeb/J,eAAiB,SAACZ,GACd,EAAKA,MAAQA,GAhBJ,KAmBbiK,SAAW,SAAC1K,GACR,EAAKA,MAAQA,GApBJ,KAuBbqL,aAAe,WACX,EAAKD,WAAY,GAvBjBlD,YAAmB9I,MAEnB+I,aACI,kBAAM,EAAKnI,SACX,SAAAA,GACQA,EACA8K,OAAOC,aAAaO,QAAQ,MAAOtL,GAEnC8K,OAAOC,aAAaC,WAAW,WDG/CtE,UAAW,IAAI8D,EACfG,WAAY,IERZ,aAAc,IAAD,gCALbY,MAAgB,CACZC,MAAM,EACN3J,KAAM,MAGG,KAIb4J,UAAY,SAACC,GACT,EAAKH,MAAMC,MAAO,EAClB,EAAKD,MAAM1J,KAAO6J,GANT,KASbd,WAAa,WACT,EAAKW,MAAMC,MAAO,EAClB,EAAKD,MAAM1J,KAAO,MAVlBqG,YAAmB9I,OFQvBuM,aAAc,IAAIvC,EAClBwC,aAAc,IGdd,aAAe,IAAD,gCAHdC,SAA0B,GAGZ,KAFdC,aAAsC,KAExB,KAIdC,oBAAsB,SAACC,GAChB/L,EAAMmK,cAAclF,mBACnB,EAAK4G,cAAe,IAAIG,KACnBC,QAAQvM,oBAAkDqM,EAAY,CACnEG,mBAAoB,kCAAMlM,EAAMyG,UAAU5D,YAAtB,aAAM,EAAsB9C,SAEnDoM,yBACAC,iBAAiBC,IAASC,aAC1BC,QAEL,EAAKV,aAAaW,QAAQC,OAAM,SAAAjM,GAAK,OAAII,QAAQ0F,IAAI,sCAAuC9F,MAE5F,EAAKqL,aAAaa,GAAG,gBAAgB,SAACd,GAClC5F,aAAY,WACR4F,EAAS3F,KAAI,SAAA0G,GAAO,OAAIA,EAAQC,UAAY,IAAI3F,KAAK0F,EAAQC,UAAY,QACzE,EAAKhB,SAAWA,QAIxB,EAAKC,aAAaa,GAAG,mBAAmB,SAACC,GACvC3G,aAAY,WACV2G,EAAQC,UAAY,IAAI3F,KAAK0F,EAAQC,WACrC,EAAKhB,SAASiB,QAAQF,WA1BpB,KAgCdG,kBAAoB,WAAO,IAAD,EACtB,YAAKjB,oBAAL,SAAmBkB,OAAON,OAAM,SAAAjM,GAAK,OAAII,QAAQ0F,IAAI,6BAA8B9F,OAjCzE,KAoCdwM,cAAgB,WACZ,EAAKpB,SAAW,GAChB,EAAKkB,qBAtCK,KAyCdG,WAzCc,uCAyCD,WAAOvE,GAAP,iBAAArI,EAAA,sDACTqI,EAAOqD,WAAP,UAAoB/L,EAAMmK,cAAclF,wBAAxC,aAAoB,EAAsC5C,GAE1D,IACI,YAAKwJ,oBAAL,SAAmBqB,OAAO,cAAexE,GAE5C,MAAOlI,GACJI,QAAQ0F,IAAI9F,GAPP,2CAzCC,sDACVyH,YAAmB9I,QHgBdgO,EAAeC,wBAAcpN,GAEnC,SAASqN,IACZ,OAAOC,qBAAWH,G,WIvBPI,eAAS,WACpB,MAAoCF,IAA7B5G,UAAY5D,EAAnB,EAAmBA,KAAM+H,EAAzB,EAAyBA,OACnB4C,EAAWC,cAQjB,OACG,cAACC,EAAA,EAAD,CAAMC,UAAQ,EAACC,MAAM,MAArB,SACI,eAACC,EAAA,EAAD,WACK,eAACH,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,IAAIC,QAAM,EAArC,UACG,qBAAKC,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAACC,YAAa,UAD/D,kBAIA,cAACZ,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAAUC,GAAG,cAAchD,KAAK,gBAC/C,cAACyC,EAAA,EAAKI,KAAN,UACG,cAACS,EAAA,EAAD,CAAQC,UAAQ,EAAC/C,QAAQ,kBAAkBsC,GAAIC,IAASC,GAAG,+BAE9D,cAACP,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,UAAUhD,KAAK,WAC1C,eAACyC,EAAA,EAAKI,KAAN,CAAWW,SAAS,QAApB,UACI,cAACC,EAAA,EAAD,CAAOP,KAAS,OAAJtL,QAAI,IAAJA,OAAA,EAAAA,EAAMgC,QAAS,mBAAoB8J,QAAM,EAACC,OAAO,UAC7D,cAACC,EAAA,EAAD,CAAUC,SAAS,WAAWC,KAAI,OAAElM,QAAF,IAAEA,OAAF,EAAEA,EAAM+B,YAA1C,SACI,eAACiK,EAAA,EAASnB,KAAV,WACI,cAACmB,EAAA,EAASf,KAAV,CAAeC,GAAIiB,IAAMf,GAAE,2BAAepL,QAAf,IAAeA,OAAf,EAAeA,EAAM8B,UAAYoK,KAAK,aAAaE,KAAK,SACnF,cAACJ,EAAA,EAASf,KAAV,CAAeoB,QAvBd,SAACC,GACtBA,EAAMC,iBACNxE,IACA4C,EAAS,IAAI,CAAC6B,SAAS,KAoBuCN,KAAK,SAASE,KAAK,0B,uDC3B1E1B,gBAAS,WACpB,MAAmDF,IAA5ClD,cAAgBvG,EAAvB,EAAuBA,UAAW6B,EAAlC,EAAkCA,aAElC,OACI,qCACI,eAACiI,EAAA,EAAD,CAAM4B,UAAQ,EAACC,KAAK,QAAQlB,MAAO,CAACmB,MAAO,OAAQC,UAAW,IAA9D,UACI,cAACC,GAAA,EAAD,CAAQT,KAAK,SAASU,UAAQ,EAACC,MAAM,OAAOnE,QAAQ,YACpD,cAACiC,EAAA,EAAKI,KAAN,CACIrC,QAAQ,iBACRoE,OAAQjM,EAAUkM,IAAI,OACtBZ,QAAS,kBAAMzJ,EAAa,MAAO,WACvC,cAACiI,EAAA,EAAKI,KAAN,CACIrC,QAAQ,YACRoE,OAAQjM,EAAUkM,IAAI,WACtBZ,QAAS,kBAAMzJ,EAAa,UAAW,WAC3C,cAACiI,EAAA,EAAKI,KAAN,CACIrC,QAAQ,cACRoE,OAAQjM,EAAUkM,IAAI,UACtBZ,QAAS,kBAAMzJ,EAAa,SAAU,cAE9C,cAACiK,GAAA,EAAD,IACA,cAAC,IAAD,CACIK,SAAU,SAACxL,GAAD,OAAekB,EAAa,YAAalB,IACnDmB,MAAO9B,EAAUlC,IAAI,YAAc,IAAIuF,a,yFCnBxCsG,gBAAS,YAA2C,IAAD,EAAlB9J,EAAkB,EAAlBA,QAC9C,EAAoC4J,IAA5B3B,EAAR,EAAQA,aAAcjF,EAAtB,EAAsBA,UACd/C,EAA6BgI,EAA7BhI,gBAAiByB,EAAYuG,EAAZvG,QAEzB,IAAI,UAAAsB,EAAU5D,YAAV,eAAgB8B,WAAYlB,EAAQT,SAAU,OAAO,KAOzD,OACE,eAACgN,GAAA,EAAD,CAAQC,SAAS,OAAjB,UACE,cAACC,GAAA,EAAD,CAAeC,SAAO,EAAC9B,MAAO,CAAEmB,MAAO,QAAvC,SACE,cAACjB,EAAA,EAAD,CACA6B,OAAK,EACLR,MAAM,OACNnE,QAAShI,EAAQsE,UAAY,YAAc,oBAE7C,cAACmI,GAAA,EAAD,CAAeG,QAAM,EAAChC,MAAO,CAAEmB,MAAO,QAAtC,SACE,cAACjB,EAAA,EAAD,CACE6B,OAAK,EACLE,OAAK,EACLV,MAAOnM,EAAQsE,UAAY,MAAQ,QACnC0D,QAAShI,EAAQsE,UAAY,WAAa,SAC1C5C,QAASA,EACT+J,QAAS,SAACqB,GAAD,OApBjB,SAAsBA,EAAmBvN,GACrCuN,EAAEnB,iBACF3L,EAAQsE,UAAYrE,EAAgBV,GAAU,GAASU,EAAgBV,GAAU,GAkB7DwN,CAAaD,EAAG9M,EAAQT,qBCzBnCuK,gBAAS,YAAuC,IAAjB9J,EAAgB,EAAhBA,QAO1C,OACI,eAACgN,GAAA,EAAD,CAAM1C,GAAIiB,IAAMf,GAAE,oBAAexK,EAAQT,UAAzC,UACI,cAAC0L,EAAA,EAAD,CAAOP,IAAK1K,EAAQoB,OAAS,qBAC7B,eAAC4L,GAAA,EAAKC,QAAN,WACI,cAACD,GAAA,EAAKf,OAAN,UAAcjM,EAAQmB,cACtB,cAAC6L,GAAA,EAAKE,YAAN,UAXZ,SAAkBC,GACd,GAAIA,EACJ,OAAOA,EAAIC,OAAS,GAAKD,EAAIE,UAAU,EAAG,IAAM,MAAQF,EAS7BG,CAAStN,EAAQuN,UAExC,eAACP,GAAA,EAAKC,QAAN,CAAcO,OAAK,EAAnB,UACI,cAACC,GAAA,EAAD,CAAMjG,KAAK,SACVxH,EAAQuE,kBAEb,cAAC,GAAD,CAAcvE,QAASA,UCnBpB8J,gBAAS,YAAsD,IAAnB5G,EAAkB,EAAlBA,UACjDwK,EAAS,CACXC,YAAa,SACbC,YAAa,GAGjB,OACI,cAACC,GAAA,EAAD,CAAMC,YAAU,EAAhB,SACK5K,EAAUV,KAAI,SAAAqB,GAAQ,OACnB,cAACkK,GAAA,EAAD,CACIC,WAAS,EAETC,QACI,cAACJ,GAAA,EAAKxD,KAAN,CAAmCC,GAAIiB,IAAMf,GAAE,oBAAe3G,EAAStE,UAAvE,SACI,cAAC0L,EAAA,EAAD,CACAa,KAAK,OACLoC,UAAQ,EAACxD,IAAK7G,EAASzC,OAAS,mBAChC+M,UAAQ,EACRvD,MAAO/G,EAASS,UAAYoJ,EAAS,QALzB7J,EAAStE,UAJjC,SAcI,cAACwO,GAAA,EAAMd,QAAP,UACI,cAAC,GAAD,CAAajN,QAAS6D,OAbrBA,EAAStE,kBCXnB,SAAS6O,GAAT,GAA4C,IAAD,MAAhBtP,EAAgB,EAAhBA,SAEtC,OACI,eAACuP,GAAA,EAAQC,MAAT,WACI,eAACD,GAAA,EAAD,WACKvP,EAASqF,aACN,cAACoK,GAAA,EAAD,CAAOrC,SAAS,MAAMC,MAAM,MAAMnE,QAAQ,YAAY4C,MAAO,CAAC4D,UAAU,YAC5E,cAACnE,GAAA,EAAKiE,MAAN,UACI,eAACjE,GAAA,EAAD,WACI,cAACA,GAAA,EAAKY,MAAN,CAAYL,MAAO,CAAC6D,aAAc,GAAI3C,KAAK,OAAOoC,UAAQ,EAACxD,KAAK,UAAA5L,EAASwE,YAAT,eAAelC,QAAS,mBAAoBkJ,GAAIiB,IAAMf,GAAE,oBAAe1L,EAASuE,gBAChJ,eAACgH,GAAA,EAAK4C,QAAN,WACI,cAAC5C,GAAA,EAAK4B,OAAN,CAAa3B,GAAIiB,IAAMf,GAAE,sBAAiB1L,EAASF,IAAnD,SACKE,EAAS6B,QAEd,eAAC0J,GAAA,EAAK6C,YAAN,wBAA4B,cAAC,IAAD,CAAM1C,GAAE,8BAAe1L,EAASwE,YAAxB,aAAe,EAAe/D,UAAtC,mBAAmDT,EAASwE,YAA5D,aAAmD,EAAenC,cAA9F,OACCrC,EAASsE,QACN,cAACiH,GAAA,EAAK6C,YAAN,UACI,cAACqB,GAAA,EAAD,CAAO1B,OAAK,EAACV,MAAM,SAAnB,6CAKPrN,EAASmE,UAAYnE,EAASsE,QAC3B,cAACiH,GAAA,EAAK6C,YAAN,UACI,cAACqB,GAAA,EAAD,CAAO1B,OAAK,EAACV,MAAM,QAAnB,yDASxB,cAACkC,GAAA,EAAD,UACI,iCACI,cAACZ,GAAA,EAAD,CAAMjG,KAAK,UADf,IAC2B/B,kBAAO3G,EAASgC,KAAO,uBAC9C,cAAC2M,GAAA,EAAD,CAAMjG,KAAK,WAFf,IAE4B1I,EAASkC,WAGzC,cAACqN,GAAA,EAAD,CAASK,WAAS,EAAlB,SACI,cAAC,GAAD,CAA0BxL,UAAWpE,EAASoE,cAElD,eAACmL,GAAA,EAAD,CAASM,UAAQ,EAAjB,UACI,+BAAO7P,EAAS+B,cAChB,cAACiK,EAAA,EAAD,CACIR,GAAIiB,IACJf,GAAE,UAAK1L,EAASF,IAChBuN,MAAM,OACNyC,QAAQ,QACR5G,QAAQ,eCrDb8B,oBAAS,WACtB,IACQ+E,EADkBjF,IAAlBlD,cACAmI,kBAER,OACE,mCACGA,EAAkBrM,KAAI,mCAAEsM,EAAF,KAAStJ,EAAT,YACrB,eAAC,WAAD,WACE,cAACyG,GAAA,EAAD,CAAQ8C,KAAG,EAAC5C,MAAM,OAAlB,SACG2C,IAEAtJ,EAAWhD,KAAI,SAAA1D,GAAQ,OACpB,cAACsP,GAAD,CAAoCtP,SAAUA,GAAvBA,EAASF,SALzBkQ,W,UCVR,SAASE,KACpB,OACI,cAAC,WAAD,UACI,cAACC,GAAA,EAAD,CAAatC,OAAK,EAAC/B,MAAO,CAAEoB,UAAW,IAAvC,SACI,eAACqC,GAAA,EAAQC,MAAT,WACI,cAACD,GAAA,EAAD,CAASzD,MAAO,CAAEsE,UAAW,KAA7B,SACI,eAACD,GAAA,EAAD,WACI,eAACA,GAAA,EAAYhD,OAAb,CAAoB7K,OAAK,EAAzB,UACI,cAAC6N,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,OAEJ,cAACF,GAAA,EAAYG,UAAb,UACI,cAACH,GAAA,EAAYE,KAAb,WAIZ,cAACd,GAAA,EAAD,UACI,eAACY,GAAA,EAAD,WACI,cAACA,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,SAGR,cAACd,GAAA,EAAD,CAASK,WAAS,EAAC9D,MAAO,CAAEsE,UAAW,MACvC,cAACb,GAAA,EAAD,CAASM,UAAQ,EAAjB,SACI,cAAC7D,EAAA,EAAD,CAAQuE,UAAQ,EAAClD,MAAM,OAAOyC,QAAQ,QAAQ5G,QAAQ,kBChB/D8B,oBAAS,WACpB,IAAOpD,EAAiBkD,IAAjBlD,cACApF,EAAiEoF,EAAjEpF,iBAAkBc,EAA+CsE,EAA/CtE,eAAgBL,EAA+B2E,EAA/B3E,gBAAiBtG,EAAciL,EAAdjL,WAC1D,EAAsC6T,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAcA,OANAC,qBAAU,WAEFnO,EAAiBwK,MAAQ,GACzB1J,MACL,CAACd,EAAiBwK,KAAM1J,IAGvB,eAACsN,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa5D,MAAM,KAAnB,SACCrF,EAAc/E,iBAAmB4N,EAC1B,qCACI,cAACP,GAAD,IACA,cAACA,GAAD,OAGJ,cAAC,IAAD,CACIY,UAAW,EACXC,SAvBpB,WACIL,GAAe,GACfzN,EAAgB,IAAIpG,EAAaF,EAAYqU,YAAc,IAC3D1N,IAAiBlE,MAAK,kBAAMsR,GAAe,OAqB3BO,SAAUR,KAAiB9T,GAAcA,EAAWqU,YAAcrU,EAAWuU,WAC7EC,aAAa,EAJjB,SAMI,cAAC,GAAD,QAKZ,cAACP,EAAA,EAAKC,OAAN,CAAa5D,MAAM,IAAnB,SACI,cAAC,GAAD,MAEJ,cAAC2D,EAAA,EAAKC,OAAN,CAAa5D,MAAO,GAApB,SACI,cAACmE,EAAA,EAAD,CAAQ9D,OAAQmD,Y,mBCzCjB,SAASY,GAAYC,GAChC,MAAsBC,aAASD,EAAM5I,MAArC,mBAAO8I,EAAP,KAAcC,EAAd,KAEA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAY1T,MAAOwT,EAAKG,WAAaH,EAAKxT,MAA1C,UACI,gCAAQqT,EAAMO,QACd,iDAAWL,GAAWF,IACrBG,EAAKG,SAAWH,EAAKxT,MAClB,uBAAOoP,MAAM,MAAb,SAAqBoE,EAAKxT,QAC3B,QCZA+M,oBAAS,WAEpB,IAAO9G,EAAa4G,IAAb5G,UAEP,OACI,gCACKA,EAAU5D,MACP,cAAC,IAAD,CAAUoL,GAAG,cAAcoB,SAAS,IAExC,cAAC,KAAD,CACIgF,cAAe,CAACC,MAAM,GAAIC,SAAS,GAAI/T,MAAO,MAC9CgU,SAAU,SAAC9L,EAAD,OAAU+L,EAAV,EAAUA,UAAV,OAAyBhO,EAAU7D,MAAM8F,GAAQ+D,OAAM,SAAAjM,GAAK,OAClEiU,EAAU,CAACjU,MAAO,kCAH1B,SAMK,gBAAEkU,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,aAAc9T,EAA9B,EAA8BA,OAA9B,OACG,eAAC,KAAD,CAAM+T,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAACnF,GAAA,EAAD,CAAQ3B,GAAG,KAAKtC,QAAQ,wBAAwBmE,MAAM,OAAOqC,UAAU,WACvE,cAAC2B,GAAD,CAAa3I,KAAK,QAAQ6J,YAAY,UACtC,cAAClB,GAAD,CAAa3I,KAAK,WAAW6J,YAAY,WAAWC,KAAK,aACzD,cAAC,KAAD,CACI9J,KAAK,QAAQ+J,OAAQ,kBACrB,cAAChD,GAAA,EAAD,CAAO3D,MAAO,CAAC6D,aAAc,IAAK5B,OAAK,EAACV,MAAM,MAAMnE,QAAS5K,EAAOL,WAExE,cAAC+N,EAAA,EAAD,CAAQpJ,QAASwP,EAAcnG,UAAQ,EAAC/C,QAAQ,QAAQsJ,KAAK,SAAS3E,OAAK,gB,mBC1BpF,SAAS6E,GAAT,GAA2C,IAAhBpU,EAAe,EAAfA,OACtC,OACI,cAACqU,GAAA,EAAD,CAAS1U,OAAK,EAAd,SACKK,GACG,cAACqU,GAAA,EAAQ5D,KAAT,UACKzQ,EAAOoF,KAAI,SAACkP,EAAUC,GAAX,OACR,cAACF,GAAA,EAAQpH,KAAT,UAAuBqH,GAAJC,UCF5B7H,oBAAS,WAEpB,IAAO9G,EAAa4G,IAAb5G,UAEP,OACI,gCACKA,EAAU5D,MACP,cAAC,IAAD,CAAUoL,GAAG,cAAcoB,SAAS,IAExC,cAAC,KAAD,CACIgF,cAAe,CAACzP,YAAa,GAAGyQ,SAAU,GAAGf,MAAM,GAAIC,SAAS,GAAI/T,MAAO,MAC3EgU,SAAU,SAAC9L,EAAD,OAAU+L,EAAV,EAAUA,UAAV,OAAyBhO,EAAU3D,SAAS4F,GAAQ+D,OAAM,SAAAjM,GAAK,OACrEiU,EAAU,CAACjU,cAEf8U,iBAAkBC,KAAW,CACzB3Q,YAAa2Q,OAAaC,WAC1BxS,SAAUuS,OACVjB,MAAOiB,OAAaC,WAAWlB,QAC/BC,SAAUgB,OAAaC,aAT/B,SAaK,gBAAEd,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,aAAc9T,EAA9B,EAA8BA,OAAQ4U,EAAtC,EAAsCA,QAASC,EAA/C,EAA+CA,MAA/C,OACG,eAAC,KAAD,CAAMd,UAAU,gBAAgBJ,SAAUE,EAAcG,aAAa,MAArE,UACI,cAACnF,GAAA,EAAD,CAAQ3B,GAAG,KAAKtC,QAAQ,0BAA0BmE,MAAM,OAAOqC,UAAU,WACzE,cAAC2B,GAAD,CAAa3I,KAAK,cAAc6J,YAAY,iBAC5C,cAAClB,GAAD,CAAa3I,KAAK,WAAW6J,YAAY,aACzC,cAAClB,GAAD,CAAa3I,KAAK,QAAQ6J,YAAY,UACtC,cAAClB,GAAD,CAAa3I,KAAK,WAAW6J,YAAY,WAAWC,KAAK,aACzD,cAAC,KAAD,CACI9J,KAAK,QAAQ+J,OAAQ,kBACjB,cAACC,GAAD,CAAkBpU,OAAQA,EAAOL,WAGzC,cAAC+N,EAAA,EAAD,CAAQuE,UAAW2C,IAAYC,GAASf,EACpCxP,QAASwP,EAAcnG,UAAQ,EAAC/C,QAAQ,WAAWsJ,KAAK,SAAS3E,OAAK,gBCrCnF7C,gBAAS,WACpB,MAAgCF,IAAzB5G,EAAP,EAAOA,UAAWiE,EAAlB,EAAkBA,WAElB,OACI,cAACoH,GAAA,EAAD,CAASnE,UAAQ,EAACsE,UAAU,SAAS3C,UAAQ,EAACsF,UAAU,WAAxD,SACI,eAAC/G,EAAA,EAAD,CAAWkB,MAAI,EAAf,UACI,eAACW,GAAA,EAAD,CAAQ3B,GAAG,KAAKJ,UAAQ,EAAxB,UACI,cAACe,EAAA,EAAD,CAAOa,KAAK,UAAUpB,IAAI,mBAAmBE,MAAO,CAAC6D,aAAc,MADvE,kBAICzL,EAAUkP,WACP,qCACA,cAACjG,GAAA,EAAD,CAAQ3B,GAAG,KAAKJ,UAAQ,EAAClC,QAAQ,wBACjC,cAAC8C,EAAA,EAAD,CAAQR,GAAIiB,IAAMf,GAAG,cAAcsB,KAAK,OAAO5B,UAAQ,EAAvD,iCAKA,qCACI,cAACY,EAAA,EAAD,CAAQW,QAAS,kBAAMxE,EAAWc,UAAU,cAAC,GAAD,MAAgB+D,KAAK,OAAO5B,UAAQ,EAAhF,oBAGA,cAACY,EAAA,EAAD,CAAQW,QAAS,kBAAMxE,EAAWc,UAAU,cAAC,GAAD,MAAmB+D,KAAK,OAAO5B,UAAQ,EAAnF,kC,UCtBT,SAASiI,GAAT,GAA6E,IAAD,IAAjDjI,gBAAiD,aAAhClC,eAAgC,MAAtB,aAAsB,EACvF,OACI,cAACoK,GAAA,EAAD,CAAQhG,QAAQ,EAAMlC,SAAUA,EAAhC,SACI,cAACgG,EAAA,EAAD,CAAQlI,QAASA,M,cCAd,SAASqK,GAAWjC,GAC/B,MAAsBC,aAASD,EAAM5I,MAArC,mBAAO8I,EAAP,KAAcC,EAAd,KAEA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAY1T,MAAOwT,EAAKG,WAAaH,EAAKxT,MAA1C,UACI,gCAAQqT,EAAMO,QACd,oDAAcL,GAAWF,IACxBG,EAAKG,SAAWH,EAAKxT,MAClB,uBAAOoP,MAAM,MAAb,SAAqBoE,EAAKxT,QAC3B,Q,cCTA,SAASuV,GAAclC,GAClC,MAA+BC,aAASD,EAAM5I,MAA9C,mBAAO8I,EAAP,KAAcC,EAAd,KAAoBgC,EAApB,KAEA,OACI,eAAC/B,GAAA,EAAKC,MAAN,CAAY1T,MAAOwT,EAAKG,WAAaH,EAAKxT,MAA1C,UACI,gCAAQqT,EAAMO,QACd,cAAC6B,GAAA,EAAD,CACIC,WAAS,EACTC,QAAStC,EAAMsC,QACfzQ,MAAOqO,EAAMrO,OAAS,KACtBqK,SAAU,SAACQ,EAAG6F,GAAJ,OAAUJ,EAAQK,SAASD,EAAE1Q,QACvC4Q,OAAQ,kBAAMN,EAAQO,YAAW,IACjCzB,YAAajB,EAAMiB,cAEtBd,EAAKG,SAAWH,EAAKxT,MAClB,uBAAOoP,MAAM,MAAb,SAAqBoE,EAAKxT,QAC3B,QC3BR,IAAMgW,GAAkB,CAC3B,CAACzH,KAAM,SAAUrJ,MAAO,UACxB,CAACqJ,KAAM,UAAWrJ,MAAO,WACzB,CAACqJ,KAAM,OAAQrJ,MAAO,QACtB,CAACqJ,KAAM,OAAQrJ,MAAO,QACtB,CAACqJ,KAAM,QAASrJ,MAAO,SACvB,CAACqJ,KAAM,SAAUrJ,MAAO,W,qBCDb,SAAS+Q,GAAY5C,GAChC,MAA+BC,aAASD,EAAM5I,MAA9C,mBAAO8I,EAAP,KAAcC,EAAd,KAAoBgC,EAApB,KAEA,OACI,eAAC/B,GAAA,EAAKC,MAAN,CAAY1T,MAAOwT,EAAKG,WAAaH,EAAKxT,MAA1C,UACI,cAAC,KAAD,uCACQuT,GACAF,GAFR,IAGI6C,SAAW3C,EAAMrO,OAAS,IAAIuB,KAAK8M,EAAMrO,QAAW,KACpDqK,SAAU,SAAArK,GAAK,OAAIsQ,EAAQK,SAAS3Q,OAEvCsO,EAAKG,SAAWH,EAAKxT,MAClB,uBAAOoP,MAAM,MAAb,SAAqBoE,EAAKxT,QAC3B,QCFA+M,oBAAS,WACpB,IAAMC,EAAWC,cACVtD,EAAiBkD,IAAjBlD,cACA9C,EAC6B8C,EAD7B9C,eAAgBF,EACagD,EADbhD,aACnBZ,EAAgC4D,EAAhC5D,aAAcnB,EAAkB+E,EAAlB/E,eACX/C,EAAMsU,cAANtU,GAEP,EAAgC0Q,mBAA6B,IAAI7O,GAAjE,mBAAO3B,EAAP,KAAiBqU,EAAjB,KAEMtB,EAAmBC,KAAW,CACjCnR,MAAOmR,OAAaC,SAAS,kCAC7BlR,YAAaiR,OAAaC,SAAS,wCACnCnR,SAAUkR,OAAaC,WACvBjR,KAAMgR,OAAWC,SAAS,oBAAoBqB,WAC9CpS,MAAO8Q,OAAaC,WACpBhR,KAAM+Q,OAAaC,aAuCtB,OApCAtC,qBAAU,WACF7Q,EACAkE,EAAalE,GACZV,MACG,SAAAY,GAAQ,OAAIqU,EAAY,IAAI1S,EAAmB3B,OAGnDqU,EAAY,CACRvU,GAAI,GACJ+B,MAAO,GACPG,KAAM,KACND,YAAa,GACbD,SAAU,GACVG,KAAM,GACNC,MAAO,OAIhB,CAACpC,EAAIkE,IAkBJnB,EAAuB,cAACwQ,GAAD,CAAkBnK,QAAQ,wBAGjD,eAACqG,GAAA,EAAD,CAASM,UAAQ,EAAjB,UACI,cAAC1C,GAAA,EAAD,CAAQjE,QAAQ,mBAAmB+G,KAAG,EAAC5C,MAAM,SAC7C,cAAC,KAAD,CACI0F,iBAAkBA,EAClBwB,oBAAkB,EAClBzC,cAAe9R,EACfiS,SAAU,SAAA9O,GAAK,OAzB3B,SAA0BnD,GACtB,GAAKA,EAASF,GASV8E,EAAa5E,GAAUZ,MAAK,kBACxB6L,EAAS,eAAD,OAAgBjL,EAASF,YAVxB,CACb,IAAIkF,EAAW,2BACRhF,GADQ,IAEXF,GAAI0U,iBAER1P,EAAeE,GAAyB5F,MAAK,kBACzC6L,EAAS,eAAD,OAAgBjG,EAAYlF,SAkBjB2U,CAAiBtR,IAJxC,SAKK,gBAAGgP,EAAH,EAAGA,aAAce,EAAjB,EAAiBA,QAASd,EAA1B,EAA0BA,aAAce,EAAxC,EAAwCA,MAAxC,OACG,eAAC,KAAD,CAAMd,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,QAA/D,UACI,cAACjB,GAAD,CAAa3I,KAAK,QAAQ6J,YAAY,UACtC,cAACgB,GAAD,CAAYmB,KAAM,EAAGnC,YAAY,cAAc7J,KAAK,gBACpD,cAAC8K,GAAD,CAAeI,QAASK,GAAiB1B,YAAY,WAAW7J,KAAK,aACrE,cAACwL,GAAD,CACIS,gBAAgB,OAChBjM,KAAK,OACLkM,gBAAc,EACdC,YAAY,OACZC,WAAW,yBAEf,cAAC3H,GAAA,EAAD,CAAQjE,QAAQ,mBAAmB+G,KAAG,EAAC5C,MAAM,SAC7C,cAACgE,GAAD,CAAakB,YAAY,OAAO7J,KAAK,SACrC,cAAC2I,GAAD,CAAakB,YAAY,QAAQ7J,KAAK,UACtC,cAACsD,EAAA,EAAD,CACIuE,SAAU6B,IAAiBe,IAAUD,EACrCtQ,QAASwP,EACTtC,QAAQ,QAAQ7D,UAAQ,EAACuG,KAAK,SAAStJ,QAAQ,WACnD,cAAC8C,EAAA,EAAD,CAAQ8D,QAAQ,QAAQ7D,UAAQ,EAACuG,KAAK,SAAStJ,QAAQ,uB,oBCvFhE8B,gBAAS,YAAoD,IAArBxB,EAAoB,EAApBA,WAC5CJ,EAAgB0B,IAAhB1B,aAYP,OAVAuH,qBAAU,WAKN,OAJInH,GACAJ,EAAaG,oBAAoBC,GAG9B,WACHJ,EAAaqB,mBAElB,CAACrB,EAAcI,IAGd,qCACI,cAAC+F,GAAA,EAAD,CACIG,UAAU,SACVtC,SAAS,MACThC,UAAQ,EACRiC,MAAM,OACNvB,MAAO,CAACiJ,OAAQ,QALpB,SAOI,cAAC5H,GAAA,EAAD,sCAEJ,cAACoC,GAAA,EAAD,CAASnC,UAAQ,EAACyC,UAAQ,EAA1B,SACI,eAACmF,GAAA,EAAQxF,MAAT,WACA,cAAC,KAAD,CACQyC,SAAU,SAAC9L,EAAD,OAAU8O,EAAV,EAAUA,UAAV,OACN7L,EAAasB,WAAWvE,GAAQ/G,MAAK,kBAAM6V,QAC/CnD,cAAe,CAACzS,KAAM,IACtB0T,iBACIC,KAAW,CACP3T,KAAM2T,OAAaC,aANnC,SAUS,gBAAEb,EAAF,EAAEA,aAAcc,EAAhB,EAAgBA,QAASf,EAAzB,EAAyBA,aAAzB,OACG,cAAC,KAAD,CAAME,UAAU,UAAhB,SACI,cAAC,KAAD,CAAO3J,KAAK,OAAZ,SACK,SAAC4I,GAAD,OACG,sBAAKxF,MAAO,CAACI,SAAU,YAAvB,UACI,cAACkF,EAAA,EAAD,CAAQ9D,OAAQ8E,IAChB,kDACIG,YAAY,mEACZmC,KAAM,GACFpD,EAAME,OAHd,IAII0D,WAAY,SAAAlH,GACK,SAATA,EAAErP,KAAkBqP,EAAEmH,UAGb,SAATnH,EAAErP,KAAmBqP,EAAEmH,WACvBnH,EAAEnB,iBACFqG,GAAWf,oBAU9C/I,EAAaC,SAAS3F,KAAK,SAAA0G,GAAO,OAC/B,eAAC4K,GAAA,EAAD,WACI,cAACA,GAAA,EAAQI,OAAT,CAAgBxJ,IAAKxB,EAAQ9H,OAAS,qBACtC,eAAC0S,GAAA,EAAQ7G,QAAT,WACI,cAAC6G,GAAA,EAAQK,OAAT,CAAgB7J,GAAIiB,IAAMf,GAAE,oBAAetB,EAAQ3J,UAAnD,SAAgE2J,EAAQ/H,cACxE,cAAC2S,GAAA,EAAQM,SAAT,UACI,gCAAMC,aAAoBnL,EAAQC,WAAlC,YAEJ,cAAC2K,GAAA,EAAQQ,KAAT,CAAc1J,MAAO,CAAC2J,WAAY,YAAlC,SAAgDrL,EAAQ/K,OACxD,cAAC2V,GAAA,EAAQU,QAAT,UACI,cAACV,GAAA,EAAQW,OAAT,2BATEvL,EAAQtK,kBCnExC8V,GAAqB,CACvBzQ,OAAQ,mBAGN0Q,GAAyB,CAC3B3J,SAAU,WACV4J,OAAQ,KACRC,KAAM,KACN9I,MAAO,OACP+I,OAAQ,OACR3I,MAAO,SAOIrC,gBAAU,YAAoD,IAAD,IAAlBhL,EAAkB,EAAlBA,SACtD,EAA2E8K,IAApElD,cAAgB1C,EAAvB,EAAuBA,iBAAkBtC,EAAzC,EAAyCA,QAASwC,EAAlD,EAAkDA,qBAElD,OACI,eAACmK,GAAA,EAAQC,MAAT,WACI,eAACD,GAAA,EAAD,CAASxB,OAAK,EAACX,SAAS,MAAMtB,MAAO,CAACmK,QAAS,KAA/C,UACKjW,EAASqF,aACN,cAACoK,GAAA,EAAD,CAAO3D,MAAO,CAACI,SAAU,WAAYgK,OAAQ,IAAMH,MAAO,GAAII,IAAK,IACnEC,QAAM,EAAC/I,MAAM,MAAMnE,QAAQ,cAE/B,cAACiD,EAAA,EAAD,CAAOP,IAAG,iCAA4B5L,EAAS8B,SAArC,QAAqD+L,OAAK,EAAC/B,MAAO8J,KAC5E,cAACrG,GAAA,EAAD,CAASzD,MAAO+J,GAAwB9H,OAAK,EAA7C,SACI,cAACxC,GAAA,EAAKiE,MAAN,UACI,cAACjE,GAAA,EAAD,UACI,eAACA,GAAA,EAAK4C,QAAN,WACI,cAAChB,GAAA,EAAD,CACIH,KAAK,OACL9D,QAASlJ,EAAS6B,MAClBiK,MAAO,CAACuB,MAAO,WAEnB,4BAAI1G,kBAAO3G,EAASgC,KAAO,iBAC3B,2CACc,mCAAQ,cAAC,IAAD,CAAM0J,GAAE,8BAAe1L,EAASwE,YAAxB,aAAe,EAAe/D,UAAtC,mBAAmDT,EAASwE,YAA5D,aAAmD,EAAenC,cAA1E,sBAOlC,cAACkN,GAAA,EAAD,CAASM,UAAQ,EAACzC,SAAS,SAA3B,SACKpN,EAASsE,OACN,qCACI,cAAC0H,EAAA,EAAD,CACIqB,MAAOrN,EAASqF,YAAc,QAAU,MACxCyK,QAAQ,OACR/B,OAAK,EACL7E,QAAWlJ,EAASqF,YAAc,wBAA0B,kBAC5DsH,QAASvH,EACTxC,QAASA,IAEb,cAACoJ,EAAA,EAAD,CAAQR,GAAIiB,IACP8D,SAAUvQ,EAASqF,YACnBqG,GAAE,mCAA8B1L,EAASF,IACzCuN,MAAM,SACNyC,QAAQ,QAJb,6BASL9P,EAASmE,QACR,cAAC6H,EAAA,EAAD,CAAQW,QAASzH,EAAkBtC,QAASA,EAA5C,+BAEA,cAACoJ,EAAA,EAAD,CAAQqB,MAAM,OACVkD,SAAUvQ,EAASqF,YACnBsH,QAASzH,EACTtC,QAASA,EAHb,mCCnELoI,gBAAS,YAAkD,IAAnBhL,EAAkB,EAAlBA,SACnD,OACI,eAACuP,GAAA,EAAQC,MAAT,WACI,cAACD,GAAA,EAAD,CAASnC,SAAS,MAAlB,SACI,eAACwD,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa5D,MAAO,EAApB,SACI,cAAC0B,GAAA,EAAD,CAAM3B,KAAK,QAAQK,MAAM,OAAO3E,KAAK,WAEzC,cAACkI,EAAA,EAAKC,OAAN,CAAa5D,MAAO,GAApB,SACI,4BAAIjN,EAAS+B,qBAIzB,cAACwN,GAAA,EAAD,CAASnC,UAAQ,EAAjB,SACI,eAACwD,EAAA,EAAD,CAAMyF,cAAc,SAApB,UACI,cAACzF,EAAA,EAAKC,OAAN,CAAa5D,MAAO,EAApB,SACI,cAAC0B,GAAA,EAAD,CAAMjG,KAAK,WAAWsE,KAAK,QAAQK,MAAM,WAE7C,cAACuD,EAAA,EAAKC,OAAN,CAAa5D,MAAO,GAApB,SACI,+BACCtG,kBAAO3G,EAASgC,KAAO,gCAKpC,cAACuN,GAAA,EAAD,CAASnC,UAAQ,EAAjB,SACI,eAACwD,EAAA,EAAD,CAAMyF,cAAc,SAApB,UACI,cAACzF,EAAA,EAAKC,OAAN,CAAa5D,MAAO,EAApB,SACI,cAAC0B,GAAA,EAAD,CAAMjG,KAAK,SAASsE,KAAK,QAAQK,MAAM,WAE3C,cAACuD,EAAA,EAAKC,OAAN,CAAa5D,MAAO,GAApB,SACI,iCAAOjN,EAASkC,MAAhB,KAAyBlC,EAASiC,qBC/B3C+I,gBAAS,YAAyE,IAAD,IAArChL,SAAWoE,EAA0B,EAA1BA,UAAWI,EAAe,EAAfA,KAC7E,OAAKJ,EAGD,qCACI,eAACmL,GAAA,EAAD,CACIG,UAAU,SACV5D,MAAO,CAAEiJ,OAAQ,QACjB3H,SAAS,MACTwC,WAAS,EACTxE,UAAQ,EACRiC,MAAM,OANV,UAQKjJ,EAAUkK,OARf,IAQ6C,IAArBlK,EAAUkK,OAAe,SAAW,SAR5D,YAUA,cAACiB,GAAA,EAAD,CAASnC,UAAQ,EAAjB,SACI,cAAC2B,GAAA,EAAD,CAAMuH,SAAO,EAACC,SAAO,EAArB,SACKnS,EAAUV,KAAI,SAAAqB,GAAQ,OACnB,eAACwG,GAAA,EAAD,CAAMO,MAAO,CAAEI,SAAU,YAAzB,UACKnH,EAAStE,YAAT,OAAsB+D,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAM/D,WACzB,cAACgP,GAAA,EAAD,CACI3D,MAAO,CAAEI,SAAU,YACnBmB,MAAM,SACN+I,OAAO,QAHX,kBAQJ,cAACjK,EAAA,EAAD,CAAOa,KAAK,OAAOpB,IAAK7G,EAASzC,OAAS,qBAC1C,eAACiJ,GAAA,EAAK4C,QAAN,CAAckI,cAAc,SAA5B,UACI,cAAC9K,GAAA,EAAK4B,OAAN,CAAa3B,GAAG,KAAhB,SACI,cAAC,IAAD,CAAME,GAAE,oBAAe3G,EAAStE,UAAhC,SAA6CsE,EAAS1C,gBAEzD0C,EAASS,WACN,cAAC+F,GAAA,EAAKiL,MAAN,CAAY1K,MAAO,CAAEuB,MAAO,UAA5B,4BAhBgCtI,EAAStE,oBAjBlD,QCAZuK,gBAAU,WACvB,IAAOpD,EAAiBkD,IAAjBlD,cACkB5H,EAAmE4H,EAArFlF,iBAA4BG,EAAyD+E,EAAzD/E,eAAgBmB,EAAyC4D,EAAzC5D,aAAcsB,EAA2BsC,EAA3BtC,sBAC1DxF,EAAMsU,cAANtU,GAOP,OALA6Q,qBAAU,WAER,OADI7Q,GAAIkE,EAAalE,GACd,kBAAMwF,OACZ,CAACxF,EAAIkE,EAAcsB,IAElBzC,IAAmB7C,EAAiB,cAACqT,GAAD,IAGtC,eAACzC,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa5D,MAAO,GAApB,UACE,cAAC,GAAD,CAAwBjN,SAAUA,IAClC,cAAC,GAAD,CAAsBA,SAAUA,IAChC,cAAC,GAAD,CAAsBwJ,WAAYxJ,EAASF,QAE7C,cAAC8Q,EAAA,EAAKC,OAAN,CAAa5D,MAAO,EAApB,SACE,cAAC,GAAD,CAAyBjN,SAAUA,YC1B9B,SAASyW,KACpB,IACA,EAA4BjG,mBAAS,MAArC,mBAAOlS,EAAP,KAAe4T,EAAf,KA2BA,OACI,qCACI,cAAC/E,GAAA,EAAD,CAAQ3B,GAAG,KAAKtC,QAAQ,yBACxB,cAACqG,GAAA,EAAD,UACI,eAACvD,EAAA,EAAOwD,MAAR,CAAckH,OAAO,IAArB,UACI,cAAC1K,EAAA,EAAD,CAAQW,QA9BxB,WAEI3P,IAAMmC,IAAIwX,uBAA6BzM,SA4BMhB,QAAQ,YAAY6E,OAAK,EAAC6I,SAAO,IAClE,cAAC5K,EAAA,EAAD,CAAQW,QA1BxB,WACI3P,IAAMmC,IAAIwX,yBAA+BzM,OAAM,SAAA0I,GAAG,OAAIvU,QAAQ0F,IAAI6O,EAAI/U,cAyBvBqL,QAAQ,cAAc6E,OAAK,EAAC6I,SAAO,IACtE,cAAC5K,EAAA,EAAD,CAAQW,QAXxB,WACI3P,IAAMsC,KAAKqX,iBAAwB,IAAIzM,OAAM,SAAA0I,GAAG,OAAIV,EAAUU,OAUV1J,QAAQ,mBAAmB6E,OAAK,EAAC6I,SAAO,IAChF,cAAC5K,EAAA,EAAD,CAAQW,QAxBxB,WACI3P,IAAMmC,IAAIwX,0BAAgCzM,OAAM,SAAA0I,GAAG,OAAIvU,QAAQ0F,IAAI6O,EAAI/U,cAuBvBqL,QAAQ,eAAe6E,OAAK,EAAC6I,SAAO,IACxE,cAAC5K,EAAA,EAAD,CAAQW,QArBxB,WACI3P,IAAMmC,IAAIwX,0BAAgCzM,OAAM,SAAA0I,GAAG,OAAIvU,QAAQ0F,IAAI6O,EAAI/U,cAoBtBqL,QAAQ,eAAe6E,OAAK,EAAC6I,SAAO,IACzE,cAAC5K,EAAA,EAAD,CAAQW,QAlBxB,WACI3P,IAAMmC,IAAIwX,2BAAiCzM,OAAM,SAAA0I,GAAG,OAAIvU,QAAQ0F,IAAI6O,OAiBxB1J,QAAQ,WAAW6E,OAAK,EAAC6I,SAAO,SAGvEtY,GACG,cAACoU,GAAD,CAAkBpU,OAAQA,OC5C3B,SAASuY,KACpB,OACI,eAACtH,GAAA,EAAD,CAASgD,aAAW,EAApB,UACI,eAACpF,GAAA,EAAD,CAAQT,MAAI,EAAZ,UACI,cAACiC,GAAA,EAAD,CAAMjG,KAAK,WADf,6DAIA,cAAC6G,GAAA,EAAQuH,OAAT,UACI,cAAC9K,EAAA,EAAD,CAAQR,GAAIiB,IAAMf,GAAG,cAAckL,SAAO,EAA1C,6CCPD5L,oBAAS,WAAwB,IAAD,MACpCtN,EAAeoN,IAAfpN,YACP,OACI,eAAC4N,EAAA,EAAD,WACI,cAAC6B,GAAA,EAAD,CAAQ3B,GAAG,KAAKtC,QAAQ,iBACxB,cAACiE,GAAA,EAAD,CAAQ8C,KAAG,EAACzE,GAAG,KAAK6B,MAAM,MAAMnE,QAAO,UAAGxL,EAAYO,aAAf,aAAG,EAAmB8Y,WAC5D,UAAArZ,EAAYO,aAAZ,eAAmB4B,UAChB,eAAC0P,GAAA,EAAD,WACI,cAACpC,GAAA,EAAD,CAAQ3B,GAAG,KAAKtC,QAAQ,cAAcmE,MAAM,SAC5C,sBAAMvB,MAAO,CAACoB,UAAW,QAAzB,mBAAoCxP,EAAYO,aAAhD,aAAoC,EAAmB4B,mB,UCT5DmL,gBAAS,WACpB,IAAO7C,EAAc2C,IAAd3C,WAEP,OACI,cAAC6O,GAAA,EAAD,CAAOhO,KAAMb,EAAWY,MAAMC,KAAMiO,QAAS9O,EAAWC,WAAY4E,KAAK,OAAzE,SACI,cAACgK,GAAA,EAAM7I,QAAP,UACKhG,EAAWY,MAAM1J,Y,UCCnB,SAAS6X,GAAT,GAAiD,IAAtBC,EAAqB,EAArBA,YACxC,EAEIrM,IADF3B,aAAgBjI,EADlB,EACkBA,QAASD,EAD3B,EAC2BA,cAG3B,OACE,cAACsO,GAAA,EAAD,CAASM,UAAQ,EAAjB,SACE,cAAC,KAAD,CACEkD,iBAAkBC,KAAW,CAC3B3Q,YAAa2Q,OAAaC,aAE5BsB,oBAAkB,EAClBzC,cAAe,CAAEzP,YAAW,OAAEnB,QAAF,IAAEA,OAAF,EAAEA,EAASmB,YAAaoM,IAAG,OAAEvN,QAAF,IAAEA,OAAF,EAAEA,EAASuN,KAClEwD,SAAU,SAAC9L,GACTlF,EAAckF,GAAQ/G,MAAK,WACzB+X,GAAY,OARlB,SAYG,gBAAGhF,EAAH,EAAGA,aAAce,EAAjB,EAAiBA,QAASd,EAA1B,EAA0BA,aAAce,EAAxC,EAAwCA,MAAxC,OACC,eAACzB,GAAA,EAAD,CACEW,UAAU,UACVJ,SAAUE,EACVG,aAAa,QAHf,UAKE,cAACjB,GAAD,CAAa3I,KAAK,cAAc6J,YAAY,iBAC5C,cAACgB,GAAD,CAAYmB,KAAM,EAAGnC,YAAY,MAAM7J,KAAK,QAC5C,cAACsD,EAAA,EAAD,CACEuE,SAAU6B,IAAiBe,IAAUD,EACrCtQ,QAASwP,EACTtC,QAAQ,QACR7D,UAAQ,EACRuG,KAAK,SACLtJ,QAAQ,2BCnCP,SAASkO,GAAT,GAAwC,IAAjBlW,EAAgB,EAAhBA,QACpC,EAAgCsP,oBAAS,GAAzC,mBAAO7N,EAAP,KAAiBwU,EAAjB,KACuBE,EAAqBvM,IAArC3B,aAAgBkO,cAEvB,OACE,cAACC,GAAA,EAAIC,KAAL,UACE,eAAC3G,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,OAAN,CAAa5D,MAAO,GAApB,UACA,cAACE,GAAA,EAAD,CAAQ2C,QAAQ,OAAOpD,KAAK,OAAOxD,QAAO,uBAAWhI,QAAX,IAAWA,OAAX,EAAWA,EAASmB,eAC3DgV,GACC,cAACrL,EAAA,EAAD,CACE8D,QAAQ,QACR/B,OAAK,EACL7E,QAASvG,EAAW,SAAW,eAC/BgK,QAAS,kBAAMwK,GAAaxU,SAIlC,cAACiO,EAAA,EAAKC,OAAN,CAAa5D,MAAO,GAApB,SACatK,EACG,cAACuU,GAAD,CAAiBC,YAAaA,IAE9B,sBAAMrL,MAAO,CAAC2J,WAAY,YAA1B,gBAAwCvU,QAAxC,IAAwCA,OAAxC,EAAwCA,EAASuN,aCxBzE,IAAM+I,GAAQ,CACV,CAACC,SAAU,gBAAiBC,KAAM,CAAC/Y,IAAK,WACxC,CAAC8Y,SAAU,cAAeC,KAAM,CAAC/Y,IAAK,SACtC,CAAC8Y,SAAU,WAAYC,KAAM,CAAC/Y,IAAK,aAGxBqM,gBAAS,WACpB,IAAO7B,EAAgB2B,IAAhB3B,aAEHpB,EAIAoB,EAJApB,mBACA7G,EAGAiI,EAHAjI,QACAiG,EAEAgC,EAFAhC,kBACAD,EACAiC,EADAjC,eAGJyJ,qBAAU,WACN5I,EAAmB7G,EAAST,YAC7B,CAACsH,EAAoB7G,IAMxB,OACI,cAACoW,GAAA,EAAIC,KAAL,CAAU3U,QAASuE,EAAnB,SACI,eAACyJ,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa5D,MAAO,GAApB,SACI,cAACE,GAAA,EAAD,CAAQ2C,QAAQ,OAAOpD,KAAK,WAAWxD,QAAS,iBAEpD,eAAC0H,EAAA,EAAKC,OAAN,CAAa5D,MAAO,GAApB,UACI,cAACqK,GAAA,EAAD,CACIE,MAAOA,GACPG,KAAM,CAAC/H,WAAW,EAAMrD,UAAU,GAClCqL,YAAa,SAAC5J,EAAGtR,GAAJ,OAdT,SAACsR,EAAmBtR,GACxCqL,EAAmB7G,EAAST,SAAU+W,GAAM9a,EAAKmb,aAAuBH,KAAK/Y,KAanCmZ,CAAgB9J,EAAGtR,MAEjD,uBACA,cAACwR,GAAA,EAAKsB,MAAN,CAAYuI,YAAa,EAAzB,SACK7Q,EAAexD,KAAI,SAAC1D,GAAD,OAChB,eAACkO,GAAA,EAAD,CACI1C,GAAIiB,IACJf,GAAE,sBAAiB1L,EAASF,IAFhC,UAKI,cAACqM,EAAA,EAAD,CACIP,IAAG,iCAA4B5L,EAAS8B,SAArC,QACHgK,MAAO,CAACsE,UAAW,IAAK4H,UAAW,WAEvC,eAAC9J,GAAA,EAAKC,QAAN,WACI,cAACD,GAAA,EAAKf,OAAN,CAAauC,UAAU,SAAvB,SAAiC1P,EAAS6B,QAC1C,eAACqM,GAAA,EAAK+J,KAAN,CAAWvI,UAAU,SAArB,UACI,8BAAM/I,kBAAO,IAAIjC,KAAK1E,EAASgC,MAAO,WACtC,8BAAM2E,kBAAO,IAAIjC,KAAK1E,EAASgC,MAAO,oBAVzChC,EAASF,oBC3C/BkL,gBAAS,WACpB,IAAO7B,EAAgB2B,IAAhB3B,aACAjI,EAAqDiI,EAArDjI,QAAS8F,EAA4CmC,EAA5CnC,WAAYD,EAAgCoC,EAAhCpC,kBAAmBE,EAAakC,EAAblC,UAE/C,OACI,cAACqQ,GAAA,EAAIC,KAAL,CAAU3U,QAASmE,EAAnB,SACI,eAAC6J,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa5D,MAAO,GAApB,SACI,cAACE,GAAA,EAAD,CACA2C,QAAQ,OACRpD,KAAK,OACLxD,QAAuB,GAAbjC,EAAA,kCAAqC/F,QAArC,IAAqCA,OAArC,EAAqCA,EAASmB,aAA9C,wBAAwEnB,QAAxE,IAAwEA,OAAxE,EAAwEA,EAASmB,YAAjF,qBAEd,cAACuO,EAAA,EAAKC,OAAN,CAAa5D,MAAO,GAApB,SACI,cAACiB,GAAA,EAAKsB,MAAN,CAAYuI,YAAa,EAAzB,SACK/Q,EAAWtD,KAAI,SAAAxC,GAAO,OACnB,cAAC,GAAD,CAAoCA,QAASA,GAA3BA,EAAQT,yB,2BCdvC,SAASyX,GAAT,GAA+D,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,WACtD,OACI,cAAC,KAAD,CACIxM,IAAKuM,EACLrM,MAAO,CAACkK,OAAQ,IAAK/I,MAAO,QAC5BoL,mBAAoB,EACpBC,YAAa,EACbC,QAAQ,eACRC,QAAQ,EACRC,SAAU,EACVC,aAAc,EACdC,YAAY,EACZC,cAAe,SAAAC,GAAO,OAAIT,EAAWS,M,cCblC,SAASC,GAAT,GAAiD,IAAnBC,EAAkB,EAAlBA,SACnCC,EAAW,CACbjE,OAAQ,kBACRlG,YAAa,OACboK,aAAc,MACdC,WAAY,OACZxJ,UAAW,SACXsG,OAAQ,KAMRmD,EAASC,uBAAY,SAAAC,GACzBN,EAASM,EAAc3V,KAAI,SAAC/C,GAAD,OAAcc,OAAOC,OAAOf,EAAM,CACzD4X,QAASe,IAAIC,gBAAgB5Y,WAEhC,CAACoY,IACJ,EAAoDS,aAAY,CAACL,WAA1DM,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,aAEpC,OACE,gDAASF,KAAT,IAAyB3N,MAAO6N,EAAY,2BAAOX,GAXlC,CACbnK,YAAa,UAU2B,eAAoCmK,GAAhF,UACE,qCAAWU,MACX,cAAC/K,GAAA,EAAD,CAAMjG,KAAK,SAASsE,KAAK,SACzB,cAACG,GAAA,EAAD,CAAQjE,QAAQ,uBCrBP,SAAS0Q,GAAT,GAA0D,IAA9BhX,EAA6B,EAA7BA,QAASlC,EAAoB,EAApBA,YAChD,EAA0B8P,mBAAc,IAAxC,mBAAOqJ,EAAP,KAAcd,EAAd,KACA,EAA8BvI,qBAA9B,mBAAOqI,EAAP,KAAgBT,EAAhB,KAcA,OACI,eAACxH,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa5D,MAAO,EAApB,UACI,cAACE,GAAA,EAAD,CAAQ8C,KAAG,EAAC5C,MAAM,OAAOnE,QAAQ,uBACjC,cAAC4P,GAAD,CAAqBC,SAAUA,OAEnC,cAACnI,EAAA,EAAKC,OAAN,CAAa5D,MAAO,IACpB,eAAC2D,EAAA,EAAKC,OAAN,CAAa5D,MAAO,EAApB,UACI,cAACE,GAAA,EAAD,CAAQ8C,KAAG,EAAC5C,MAAM,OAAOnE,QAAQ,0BAChC2Q,GAASA,EAAMvL,OAAS,GACrB,cAAC4J,GAAD,CAAoBE,WAAYA,EAAYD,aAAc0B,EAAM,GAAGtB,aAG3E,cAAC3H,EAAA,EAAKC,OAAN,CAAa5D,MAAO,IACpB,eAAC2D,EAAA,EAAKC,OAAN,CAAa5D,MAAO,EAApB,UACI,cAACE,GAAA,EAAD,CAAQ8C,KAAG,EAAC5C,MAAM,OAAOnE,QAAQ,8BACjC,qCACA,qBAAKmJ,UAAU,cAAcvG,MAAO,CAACsE,UAAW,IAAK0J,SAAU,YAC9DD,GAASA,EAAMvL,OAAS,GACrB,eAACyL,GAAA,EAAD,CAAarD,OAAQ,EAArB,UACI,cAAC1K,EAAA,EAAD,CAAQpJ,QAASA,EAAS+J,QAhC9C,WACQkM,GACAA,EAAQmB,mBAAmBC,QAAO,SAAAC,GAAI,OAAIxZ,EAAYwZ,OA8BCjO,UAAQ,EAACS,KAAK,UACzD,cAACV,EAAA,EAAD,CAAQuE,SAAU3N,EAAS+J,QAAS,kBAAMoM,EAAS,KAAKrM,KAAK,sBCrCtE1B,oBAAS,YAA0C,IAAD,EAAjB9J,EAAiB,EAAjBA,QAC5C,EAAqG4J,IAA9F3B,aAAekO,EAAtB,EAAsBA,cAAe3W,EAArC,EAAqCA,YAAaoG,EAAlD,EAAkDA,UAAWlE,EAA7D,EAA6DA,QAAS7B,EAAtE,EAAsEA,aAAcC,EAApF,EAAoFA,YACpF,EAAwCwP,oBAAS,GAAjD,mBAAO2J,EAAP,KAAqBC,EAArB,KACA,EAA4B5J,mBAAS,IAArC,mBAAO6J,EAAP,KAAeC,EAAf,KAgBA,OACI,cAAChD,GAAA,EAAIC,KAAL,UACI,eAAC3G,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa5D,MAAO,GAApB,UACI,cAACE,GAAA,EAAD,CAAQT,KAAK,QAAQxD,QAAQ,SAAS4G,QAAQ,SAC7CuH,GACG,cAACrL,EAAA,EAAD,CAAQ8D,QAAQ,QAAQ/B,OAAK,EAAC7E,QAASiR,EAAe,SAAW,YAC7DxN,QAAS,kBAAMyN,GAAiBD,SAG5C,cAACvJ,EAAA,EAAKC,OAAN,CAAa5D,MAAO,GAApB,SACKkN,EACG,cAACP,GAAD,CAAmBlZ,YA1BvC,SAA2BC,GACvBD,EAAYC,GAAMvB,MAAK,kBAAMgb,GAAgB,OAyBsBxX,QAASkE,IAG5D,cAACoH,GAAA,EAAKsB,MAAN,CAAYuI,YAAa,EAAzB,mBACK7W,EAAQqG,cADb,aACK,EAAgB7D,KAAI,SAAA4D,GAAK,OACtB,eAAC4G,GAAA,EAAD,WACI,cAAC/B,EAAA,EAAD,CAAOP,IAAKtE,EAAMpI,MACjBmY,GACG,eAAC0C,GAAA,EAAD,CAAalM,OAAK,EAAC6I,OAAQ,EAA3B,UACI,cAAC1K,EAAA,EAAD,CACI+B,OAAK,EACLV,MAAM,QACNnE,QAAQ,OACRR,KAAQ,OAASpB,EAAMxH,GACvByQ,SAAYjJ,EAAME,OAClB5E,QAAUyX,IAAW,OAAS/S,EAAMxH,IAAO8C,EAC3C+J,QAAW,SAAAqB,GAAC,OAtCxD,SAA6B1G,EAAc0G,GACvCsM,EAAUtM,EAAEuM,cAAc7R,MAC1B3H,EAAauG,GAoC2CkT,CAAmBlT,EAAO0G,MAE9C,cAAChC,EAAA,EAAD,CACCpJ,QAAUyX,IAAW/S,EAAMxH,IAAO8C,EAClC2N,SAAYjJ,EAAME,OACnBuG,OAAK,EAACV,MAAM,MACZX,KAAK,QACLhE,KAAQpB,EAAMxH,GACd6M,QAAS,SAAAqB,GAAC,OAzClD,SAA4B1G,EAAc0G,GACtCsM,EAAUtM,EAAEuM,cAAc7R,MAC1B1H,EAAYsG,GAuCsCmT,CAAkBnT,EAAO0G,WAnBxC1G,EAAMxH,mBCjClC,SAAS4a,GAAT,GAA2C,IAAlBxZ,EAAiB,EAAjBA,QAC7BiI,EAAgB2B,IAAhB3B,aAEDqO,EAAQ,CACV,CAACC,SAAU,QAAShF,OAAQ,kBAAM,cAAC2E,GAAD,CAAclW,QAASA,MACzD,CAACuW,SAAU,SAAUhF,OAAQ,kBAAM,cAAC,GAAD,CAAevR,QAASA,MAC3D,CAACuW,SAAU,SAAUhF,OAAQ,kBAAM,cAAC,GAAD,MACnC,CAACgF,SAAU,aAAchF,OAAQ,kBAAM,cAAC,GAAD,MACvC,CAACgF,SAAU,YAAahF,OAAQ,kBAAO,cAAC,GAAD,OAG3C,OACI,cAAC6E,GAAA,EAAD,CACIK,KAAM,CAAC9J,OAAO,EAAMd,UAAU,GAC9B4N,aAAa,QACbnD,MAAOA,EACPI,YAAa,SAAC5J,EAAGtR,GAAJ,OAAayM,EAAa/B,aAAa1K,EAAKmb,gB,wBCrBtD7M,gBAAS,YACvB,IAD+C9J,EAChD,EADgDA,QAE5C,OACI,cAACqO,GAAA,EAAD,UACI,eAACqB,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa5D,MAAO,GAApB,SACI,cAAC1B,GAAA,EAAKiE,MAAN,UACI,eAACjE,GAAA,EAAD,WACI,cAACA,GAAA,EAAKY,MAAN,CAAYC,QAAM,EAACY,KAAK,QAAQpB,IAAK1K,EAAQoB,OAAR,qBACrC,cAACiJ,GAAA,EAAK4C,QAAN,CAAckI,cAAc,SAA5B,SACI,cAAClJ,GAAA,EAAD,CAAQ3B,GAAG,KAAKtC,QAAShI,EAAQmB,uBAKjD,eAACuO,EAAA,EAAKC,OAAN,CAAa5D,MAAO,EAApB,UACI,eAAC2N,GAAA,EAAUpL,MAAX,CAAiBkH,OAAQ,EAAzB,UACI,cAACkE,GAAA,EAAD,CAAW/I,MAAM,YAAY1O,MAAOjC,EAAQuE,iBAC5C,cAACmV,GAAA,EAAD,CAAW/I,MAAM,YAAY1O,MAAOjC,EAAQ2G,oBAEhD,cAACgT,GAAA,EAAD,IACA,cAAC,GAAD,CAAc3Z,QAASA,eCrB5B8J,gBAAS,WACpB,IAAOvK,EAAY2T,cAAZ3T,SACA0I,EAAgB2B,IAAhB3B,aACA9B,EAAsC8B,EAAtC9B,YAAanG,EAAyBiI,EAAzBjI,QAASkG,EAAgB+B,EAAhB/B,aAS7B,OAPAuJ,qBAAU,WAEN,OADAtJ,EAAY5G,GACL,WACH2G,EAAa,MAElB,CAACC,EAAa5G,EAAU2G,IAGvB,cAACwJ,EAAA,EAAD,UACI,cAACA,EAAA,EAAKC,OAAN,CAAa5D,MAAO,GAApB,SACK/L,GACD,qCACI,cAAC,GAAD,CAAeA,QAASA,IACxB,cAACwZ,GAAD,CAAgBxZ,QAASA,cC0B7C,SAAS4Z,KACP,OACE,qCACE,cAAC,IAAD,CAAgB5O,SAAS,eAAe6O,iBAAe,IACvD,cAAC,EAAD,IACA,cAACzP,EAAA,EAAD,CAAWQ,MAAO,CAACoB,UAAW,OAA9B,SAEI,cAAC,IAAD,UACI,cAAC,IAAD,CAAO8N,KAAK,IAAKC,QAAS,cAAC,GAAD,aAQxC,SAASC,KACP,IAAMC,EAAWC,cACjB,OACE,qCACE,cAAC,IAAD,CAAgBlP,SAAS,eAAe6O,iBAAe,IACvD,cAAC,EAAD,IACA,cAACzP,EAAA,EAAD,CAAWQ,MAAO,CAACoB,UAAW,OAA9B,SAEI,eAAC,IAAD,WACI,cAAC,IAAD,CAAO8N,KAAK,IAAMC,QAAS,cAAC,GAAD,MAC3B,cAAC,IAAD,CAAOD,KAAK,MAAMC,QAAS,cAAC,GAAD,MAC3B,cAAC,IAAD,CAAOD,KAAK,gBAAgBC,QAAS,cAAC,GAAD,IAArC,SACE,cAAC,IAAD,CAA2BD,KAAK,MAAMC,QAAS,cAAC,GAAD,KAAnCE,EAASxc,OAEvB,cAAC,IAAD,CAAOqc,KAAM,SAAUC,QAAS,cAAC,GAAD,cAS9C,SAASI,KACP,IAAMF,EAAWC,cAEjB,OACE,qCACE,cAAC,IAAD,CAAgBlP,SAAS,eAAe6O,iBAAe,IACvD,cAAC,EAAD,IACA,cAACzP,EAAA,EAAD,CAAWQ,MAAO,CAACoB,UAAW,OAA9B,SAEM,eAAC,IAAD,CAAQiO,SAAUA,EAAlB,UACE,cAAC,IAAD,CAAOH,KAAK,sBAAsBC,QAAS,cAAC,GAAD,MAC3C,cAAC,IAAD,CAAOD,KAAK,UAAUC,QAAS,cAACxE,GAAD,MAC/B,cAAC,IAAD,CAAOuE,KAAK,gBAAgBC,QAAS,cAACK,GAAD,MACrC,cAAC,IAAD,CAAON,KAAK,KAAKC,QAAS,cAACpE,GAAD,cAQzB7L,oBAxFf,WACE,MAAiCF,IAA1BpN,EAAP,EAAOA,YAAawG,EAApB,EAAoBA,UAUpB,OARAyM,qBAAU,WACJjT,EAAYF,MACd0G,EAAUuE,UAAU8S,SAAQ,kBAAK7d,EAAYmL,kBAE7CnL,EAAYmL,iBAEd,CAACnL,EAAawG,IAEXxG,EAAYkL,UAEf,qCACE,cAAC4S,GAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOR,KAAK,IAAIC,QAAS,cAAC,GAAD,MACxB,cAAC,IAAD,CAAOD,KAAM,eAAgBC,QAAS,cAACC,GAAD,MAIvC,cAAC,IAAD,CAAOF,KAAM,SAAUC,QAAS,cAACH,GAAD,MAChC,cAAC,IAAD,CAAOE,KAAM,KAAMC,QAAS,cAACI,GAAD,YAXC,cAAChI,GAAD,CAAkBnK,QAAQ,sBCrBhDuS,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBvc,MAAK,YAAkD,IAA/Cwc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCNC,SAASO,KACtB,IAAQC,EAAad,cAAbc,SAMR,OAJAvL,qBAAU,WACRrI,OAAO6T,SAAS,EAAG,KAClB,CAACD,IAEG,KCIF,IAAM1d,GAAW4d,eAsBxBC,IAAS5J,OACP,cAAC,IAAM6J,WAAP,UACE,cAAC1R,EAAa2R,SAAd,CAAuBpZ,MAAO1F,EAA9B,SACE,eAAC,IAAD,WACE,cAACwe,GAAD,IACA,cAAC,GAAD,WAKNO,SAASC,eAAe,SAQ1BhB,O","file":"static/js/main.098b06da.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPAge: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination){\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber = 1;\r\n    pageSize = 2;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}\r\n\r\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token && config.headers) config.headers.Authorization = `Bearer ${token}`\r\n\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n        if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n\r\n        const pagination = response.headers['pagination'];\r\n        if (pagination) {\r\n            response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n            return response as AxiosResponse<PaginatedResult<any>>;\r\n        }\r\n        return response;\r\n}, (error: AxiosError) => {\r\n    const {data, status, config} = error.response!;\r\n    switch(status) {\r\n        case 400:\r\n            if (typeof data === 'string'){\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.console.errors.hasOwnProperty('id')){\r\n                history.push('/not-found');\r\n            }\r\n             \r\n            if (data.errors){\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors){\r\n                    if (data.errors[key]){\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }            \r\n            break;\r\n        case 401:\r\n            toast.error('unorthorized');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            //navigate('/not-found');\r\n            //window.history.pushState({}, \"\", \"/not-found\");\r\n            break;\r\n        case 500:\r\n          \r\n            //toast.error('server error');\r\n            store.commonStore.serServerError(data);\r\n            //history.push('/server-error')\r\n            history.push('/server-error')\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => \r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => \r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)        \r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees?: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues){\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[]\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.userName;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    submitting = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor(){\r\n        makeAutoObservable (this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch(predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate')\r\n                this.predicate.set('startDate', value);\r\n            break;\r\n\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            }else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values())\r\n            .sort((a,b) => a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            },{} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try{\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n\r\n            runInAction(() => {\r\n                result.data.map(x => \r\n                    this.setActivity(x)\r\n                );\r\n                this.setPagination(result.pagination);\r\n                this.setLoadingInitial(false);\r\n            })\r\n        } catch (error){\r\n            runInAction(() => {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            })\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) =>{\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) =>{\r\n        let activity = this.getActivity(id);\r\n        if (activity){\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        }else{\r\n            this.setLoadingInitial(true);\r\n            try{\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            }catch(error){\r\n                console.log(error);\r\n                this.setLoadingInitial(false);        }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user){\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.userName\r\n            )\r\n            activity.isHost = activity.hostUsername === user.userName;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean)=>{\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    editActivity = async (activity: ActivityFormValues) => {\r\n\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n\r\n            })\r\n        }catch (error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    createActivity = async (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.userName;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n\r\n        try{\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        }\r\n        catch (error){\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing){\r\n                    this.selectedActivity.attendees = \r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.userName);\r\n                    this.selectedActivity.isGoing = false;\r\n                }else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n\r\n            })\r\n        }catch (error){\r\n            console.log(error);\r\n        }finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction( () => this.loading = false);\r\n        }\r\n\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees?.forEach(attendee => {\r\n                if (attendee.username === username){\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n  profile: Profile | null = null;\r\n  loadingProfile = false;\r\n  uploading = false;\r\n  loading = false;\r\n  loadingFollowings = false;\r\n  followings: Profile[] = [];\r\n  activeTab = 0;\r\n  userActivities: UserActivity[] = [];\r\n  loadingActivities = false;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n\r\n    reaction(\r\n      () => this.activeTab,\r\n      (activeTab) => {\r\n       if (activeTab == 3 || activeTab == 4) {\r\n          const predicate = activeTab == 3 ? \"Followers\" : \"Following\";\r\n          this.loadFollowings(predicate);\r\n        } else {\r\n          this.followings = [];\r\n        }\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  setActivetab = (activeTab: any) => {\r\n    this.activeTab = activeTab;\r\n  };\r\n\r\n  get isCurrentUser() {\r\n    if (store.userStore.user && this.profile) {\r\n      return store.userStore.user.userName === this.profile.username;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  loadProfile = async (username: string) => {\r\n    this.loadingProfile = true;\r\n    try {\r\n      const profile = await agent.Profiles.get(username);\r\n      runInAction(() => {\r\n        this.profile = profile;\r\n        this.loadingProfile = false;\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      runInAction(() => (this.loadingProfile = false));\r\n    }\r\n  };\r\n\r\n  uploadPhoto = async (file: Blob) => {\r\n    this.uploading = true;\r\n    try {\r\n      const response = await agent.Profiles.uploadPhoto(file);\r\n      const photo = response.data;\r\n      runInAction(() => {\r\n        if (this.profile) {\r\n          this.profile.photos?.push(photo);\r\n          if (photo.isMain && store.userStore.user) {\r\n            store.userStore.setImage(photo.url);\r\n            this.profile.image = photo.url;\r\n          }\r\n        }\r\n        this.uploading = false;\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      runInAction(() => (this.uploading = false));\r\n    }\r\n  };\r\n\r\n  setMainPhoto = async (photo: Photo) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.setMainPhoto(photo.id);\r\n      store.userStore.setImage(photo.url);\r\n      runInAction(() => {\r\n        if (this.profile && this.profile.photos) {\r\n          this.profile.photos.find((p) => p.isMain)!.isMain = false;\r\n          this.profile.photos.find((p) => p.id === photo.id)!.isMain = true;\r\n          this.profile.image = photo.url;\r\n          this.loading = false;\r\n        }\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => (this.loading = false));\r\n      console.log(error);\r\n    }\r\n  };\r\n  deletePhoto = async (photo: Photo) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.deletePhoto(photo.id);\r\n      runInAction(() => {\r\n        if (this.profile) {\r\n          this.profile.photos = this.profile?.photos?.filter(\r\n            (p) => p.id !== photo.id\r\n          );\r\n        }\r\n        this.loading = false;\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => (this.loading = false));\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  updateProfile = async (profile: Partial<Profile>) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.updateProfile(profile);\r\n      runInAction(() => {\r\n        if (\r\n          profile.displayName &&\r\n          profile.displayName !== store.userStore.user?.displayName\r\n        ) {\r\n          store.userStore.setDisplayName(profile.displayName);\r\n        }\r\n        this.profile = { ...this.profile, ...(profile as Profile) };\r\n        this.loading = false;\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      runInAction(() => (this.loading = false));\r\n    }\r\n  };\r\n\r\n  updateFollowing = async (username: string, following: boolean) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.updateFollowing(username);\r\n      store.activityStore.updateAttendeeFollowing(username);\r\n      runInAction(() => {\r\n        if (\r\n          this.profile &&\r\n          this.profile.username != store.userStore.user?.userName &&\r\n          this.profile.username === username\r\n        ) {\r\n          following\r\n            ? this.profile.followersCount++\r\n            : this.profile.followersCount--;\r\n          this.profile.following = !this.profile.following;\r\n        }\r\n\r\n        if (this.profile && this.profile.username === store.userStore.user?.userName) {\r\n          following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n        }\r\n\r\n        this.followings.forEach((profile) => {\r\n          if (profile.username === username) {\r\n            profile.following\r\n              ? profile.followersCount--\r\n              : profile.followersCount++;\r\n            profile.following = !profile.following;\r\n          }\r\n        });\r\n        this.loading = false;\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      runInAction(() => (this.loading = false));\r\n    }\r\n  };\r\n\r\n  loadFollowings = async (predicate: string) => {\r\n    this.loadingFollowings = true;\r\n\r\n    try {\r\n      const followings = await agent.Profiles.listFollowings(\r\n        this.profile!.username,\r\n        predicate\r\n      );\r\n      runInAction(() => {\r\n        this.followings = followings;\r\n        this.loadingFollowings = false;\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      runInAction(() => (this.loadingFollowings = false));\r\n    }\r\n  };\r\n\r\n  loadUserActivities = async (username: string, predicate?: string) => {\r\n    this.loadingActivities = true;\r\n\r\n    try {\r\n      const userActivities = await agent.Profiles.listActivities(username, predicate!);\r\n      runInAction(() => {\r\n        this.userActivities = userActivities;\r\n        this.loadingActivities = false;\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      runInAction(() => (this.loadingActivities = false));\r\n    }\r\n  };\r\n}\r\n\r\n","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn(){\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n\r\n            runInAction(() => this.user = user);\r\n\r\n            store.modalStore.closeModal();\r\n\r\n        } catch(error){\r\n            throw console.error();\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user)\r\n        } catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n\r\n            runInAction(() => this.user = user);\r\n\r\n            store.modalStore.closeModal();\r\n\r\n        } catch(error){\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n} ","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore,\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/ServerError\";\r\n\r\nexport default class CommonStore{\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token){\r\n                    window.localStorage.setItem('jwt', token);\r\n                }else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    serServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setApploaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean,\r\n    body: JSX.Element | null\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal : Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnecton : HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    creareHubConnection = (activityId: string) => {\r\n        if(store.activityStore.selectedActivity) {\r\n            this.hubConnecton = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n            \r\n            this.hubConnecton.start().catch(error => console.log('Error establishing the connection: ', error))\r\n\r\n            this.hubConnecton.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.map(comment => comment.createdAt = new Date(comment.createdAt + 'Z'))\r\n                    this.comments = comments\r\n                });\r\n            })\r\n\r\n            this.hubConnecton.on('ReceivedComment', (comment: ChatComment) => {\r\n              runInAction(() => {\r\n                comment.createdAt = new Date(comment.createdAt);\r\n                this.comments.unshift(comment)\r\n              }) ;\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnecton?.stop().catch(error => console.log('Error stopping connection ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection()\r\n    }    \r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n\r\n        try {\r\n            this.hubConnecton?.invoke('SendComment', values);\r\n\r\n        }catch (error){\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Button, Container, Dropdown, Image, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\nexport default observer(function NavBar(){\r\n    const {userStore: {user, logout}} = useStore();\r\n    const navigate = useNavigate();\r\n\r\n    const handleLogoutUser = (event: any) => {\r\n        event.preventDefault();\r\n        logout();\r\n        navigate(\"/\",{replace: true});\r\n      }\r\n\r\n    return (\r\n       <Menu inverted fixed='top' >\r\n           <Container>\r\n                <Menu.Item as={NavLink} to='/' header>\r\n                   <img src='/assets/logo.png' alt=\"logo\" style={{marginRight: '10px'}}></img>\r\n                   Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink}  to='/activities' name='/Activities' />\r\n                <Menu.Item>\r\n                   <Button positive content='Create Activity' as={NavLink} to='/activities/activityEdit' ></Button>\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/errors' name=\"errors\" />   \r\n                <Menu.Item position=\"right\">\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right'/>\r\n                    <Dropdown pointing='top left' text={user?.displayName}> \r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.userName}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={handleLogoutUser} text='Logout' icon='pover' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>            \r\n           </Container>\r\n       </Menu> \r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default observer(function ActivityFilters(){\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n\r\n    return (\r\n        <>\r\n            <Menu vertical size=\"large\" style={{width: '100%', marginTop: 25}}>\r\n                <Header icon='filter' attached color=\"teal\" content='Filters' />\r\n                <Menu.Item \r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')} />\r\n                <Menu.Item \r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')} />\r\n                <Menu.Item \r\n                    content=\"I'm Hosting\"\r\n                    active={predicate.has('IsHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')} />\r\n            </Menu>  \r\n            <Header /> \r\n            <Calendar \r\n                onChange={(date: any) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('setDate') || new Date()}\r\n            />     \r\n        </>\r\n\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { Reveal, RevealContent, Button } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n  profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n  const { profileStore, userStore } = useStore();\r\n  const { updateFollowing, loading } = profileStore;\r\n\r\n  if (userStore.user?.userName == profile.username) return null;\r\n\r\n  function handleFollow(e: SyntheticEvent, username: string) {\r\n      e.preventDefault();\r\n      profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n  }\r\n\r\n  return (\r\n    <Reveal animated=\"move\">\r\n      <RevealContent visible style={{ width: \"100%\" }}>\r\n        <Button \r\n        fluid \r\n        color=\"teal\" \r\n        content={profile.following ? \"Following\" : \"Not following\"}  />\r\n      </RevealContent>\r\n      <RevealContent hidden style={{ width: \"100%\" }}>\r\n        <Button\r\n          fluid\r\n          basic\r\n          color={profile.following ? \"red\" : \"green\"}\r\n          content={profile.following ? \"Unfollow\" : \"Follow\"}\r\n          loading={loading}\r\n          onClick={(e) => handleFollow(e, profile.username)}\r\n        />\r\n      </RevealContent>\r\n    </Reveal>\r\n  );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile}: Props){\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n        return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n        }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount}\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Image, List, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/models/profile\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\nexport default observer(function ActivityListItemAttendee({attendees}: Props){\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal >\r\n            {attendees.map(attendee => (\r\n                <Popup \r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image \r\n                            size='mini'\r\n                            circular src={attendee.image || '/assets/user.png'} \r\n                            bordered\r\n                            style={attendee.following ? styles : null}\r\n                             />\r\n                        </List.Item>\r\n                 }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n\r\n            ))}\r\n        </List>\r\n    )\r\n})","import { format } from \"date-fns\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface prop{\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({activity}: prop){\r\n\r\n    return(\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && \r\n                    <Label attached=\"top\" color=\"red\" content='Cancelled' style={{textAlign:'center'}} />}\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size=\"tiny\" circular src={activity.host?.image || '/assets/user.png'} as={Link} to={`/profiles/${activity.hostUsername}`} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link> </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color=\"orange\">\r\n                                        You are hosting this activoty\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color=\"green\">\r\n                                        You are going to this activoty\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button \r\n                    as={Link}\r\n                    to={`${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { Fragment } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\nexport default observer(function ActivityList() {\r\n  const { activityStore } = useStore();\r\n  const { groupedActivities } = activityStore;\r\n\r\n  return (\r\n    <>\r\n      {groupedActivities.map(([group, activities]) => (\r\n        <Fragment key={group}>\r\n          <Header sub color=\"teal\">\r\n            {group}\r\n          </Header>\r\n            {activities.map(activity => (\r\n                <ActivityListItem key={activity.id} activity={activity} />\r\n            )) }\r\n        </Fragment>\r\n      ))}\r\n    </>\r\n  );\r\n});\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const {activityStore} = useStore();\r\n    const {activityRegistry, loadActivities, setPagingParams, pagination} = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        debugger;\r\n        if (activityRegistry.size <= 1)\r\n            loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n  \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n            {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ): (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList></ActivityList>\r\n                    </InfiniteScroll>\r\n                )}\r\n\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext}></Loader>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form } from \"semantic-ui-react\";\r\n\r\ninterface Props{\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props : Props){\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <label color=\"red\" >{meta.error}</label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport {useStore} from '../../app/stores/store'\r\n\r\nexport default observer(function LoginForm() {\r\n    \r\n    const {userStore} = useStore();\r\n\r\n    return (\r\n        <div>\r\n            {userStore.user && (\r\n                <Navigate to=\"/activities\" replace={true} />\r\n            )}\r\n            <Formik\r\n                initialValues={{email:'', password:'', error: null }}\r\n                onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                    setErrors({error: 'Invalid email or password'}))\r\n                }\r\n            >\r\n                {({handleSubmit, isSubmitting, errors}) => (\r\n                    <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n                        <Header as='h2' content='Login to reactivities' color='teal' textAlign='center' />\r\n                        <MyTextInput name=\"email\" placeholder=\"Email\" />\r\n                        <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\"  />\r\n                        <ErrorMessage \r\n                            name=\"error\" render={() => \r\n                            <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />}\r\n                        />\r\n                        <Button loading={isSubmitting} positive content=\"Login\" type='submit' fluid/>\r\n                    </Form>\r\n                )}\r\n\r\n            </Formik>            \r\n        </div>\r\n    )\r\n\r\n\r\n    \r\n})","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\nexport default function ValidationErrors({errors}: Props){\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => \r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    )}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport {useStore} from '../../app/stores/store'\r\nimport * as Yup from 'yup'\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\nexport default observer(function RegisterForm() {\r\n    \r\n    const {userStore} = useStore();\r\n\r\n    return (\r\n        <div>\r\n            {userStore.user && (\r\n                <Navigate to=\"/activities\" replace={true} />\r\n            )}\r\n            <Formik\r\n                initialValues={{displayName: '',userNAme: '',email:'', password:'', error: null }}\r\n                onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                    setErrors({error}))\r\n                    }\r\n                validationSchema={Yup.object({\r\n                    displayName: Yup.string().required(),\r\n                    username: Yup.string(),\r\n                    email: Yup.string().required().email(),\r\n                    password: Yup.string().required(),\r\n                })}\r\n\r\n            >\r\n                {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                    <Form className=\"ui form error\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n                        <Header as='h2' content='Sign uo to reactivities' color='teal' textAlign='center' />\r\n                        <MyTextInput name=\"displayName\" placeholder=\"Display Name\" />\r\n                        <MyTextInput name=\"username\" placeholder=\"Username\" />\r\n                        <MyTextInput name=\"email\" placeholder=\"Email\" />\r\n                        <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\"  />\r\n                        <ErrorMessage \r\n                            name=\"error\" render={() => \r\n                                <ValidationErrors errors={errors.error} />\r\n                            }\r\n                        />\r\n                        <Button disabled={!isValid || !dirty || isSubmitting} \r\n                            loading={isSubmitting} positive content=\"Register\" type='submit' fluid/>\r\n                    </Form>\r\n                )}\r\n\r\n            </Formik>            \r\n        </div>\r\n    )\r\n\r\n\r\n    \r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Header, Segment, Image, Button } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport LoginForm from \"../../users/LoginForm\";\r\nimport RegisterForm from \"../../users/RegisterForm\";\r\n\r\nexport default observer(function HomePage(){\r\n    const {userStore, modalStore} = useStore();\r\n\r\n    return (\r\n        <Segment inverted textAlign=\"center\" vertical className=\"masthead\">\r\n            <Container text>\r\n                <Header as='h1' inverted >\r\n                    <Image size='massive' src='/assets/logo.png' style={{marginBottom: 12}} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                    <Header as='h2' inverted content='Welcome Rectivities' />\r\n                    <Button as={Link} to='/activities' size=\"huge\" inverted >\r\n                        Go to Activities\r\n                    </Button>\r\n                    </>\r\n                ): (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size=\"huge\" inverted >\r\n                            Login!\r\n                        </Button>  \r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size=\"huge\" inverted >\r\n                            Register!\r\n                        </Button>                     \r\n                    </>\r\n                                   \r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'} : Props){\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form } from \"semantic-ui-react\";\r\n\r\ninterface Props{\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props : Props){\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <label color=\"red\" >{meta.error}</label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props{\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props : Props){\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label>\r\n            <Select  \r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <label color=\"red\" >{meta.error}</label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form } from \"semantic-ui-react\";\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker'\r\n\r\nexport default function MyDateInput(props : Partial<ReactDatePickerProps>){\r\n    const [field, meta, helpers] = useField(props.name!);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <label color=\"red\" >{meta.error}</label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/loadinComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport {v4 as uuid} from 'uuid';\r\nimport { Formik, Form  } from \"formik\";\r\nimport * as  Yup from 'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { Activity, ActivityFormValues } from \"../../../app/models/activity\";\r\n\r\nexport default observer(function ActivityForm(){\r\n    const navigate = useNavigate();\r\n    const {activityStore} = useStore();\r\n    const {createActivity, editActivity, \r\n        loadActivity, loadingInitial} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [activity, SetActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n       title: Yup.string().required('The Activity title is required'),\r\n       description: Yup.string().required('The Activity description is required'),\r\n       category: Yup.string().required(),\r\n       date: Yup.date().required('Date is required').nullable(),\r\n       venue: Yup.string().required(),\r\n       city: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id){\r\n            loadActivity(id)\r\n            .then(\r\n                activity => SetActivity(new ActivityFormValues(activity))\r\n            )\r\n        }else{\r\n            SetActivity({\r\n                id: '',\r\n                title: '',\r\n                date: null,\r\n                description: '',\r\n                category: '',\r\n                city: '',\r\n                venue: ''       \r\n            });\r\n        }\r\n\r\n    }, [id, loadActivity])\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues){\r\n        if (!activity.id){\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity as Activity).then(()=>\r\n                navigate(`/activities/${newActivity.id}`)\r\n            )\r\n        }else{\r\n            editActivity(activity).then(()=>\r\n                navigate(`/activities/${activity.id}`)\r\n            )\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content=\"Loading activity...\"></LoadingComponent>\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color=\"teal\" />\r\n            <Formik \r\n                validationSchema={validationSchema}\r\n                enableReinitialize \r\n                initialValues={activity} \r\n                onSubmit={value => handleFormSubmit(value)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty })=> (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete=\"false\">\r\n                        <MyTextInput name=\"title\" placeholder=\"Title\" />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description'/>\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category'/>\r\n                        <MyDateInput \r\n                            placeholderText='Date' \r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption=\"time\"\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color=\"teal\" />\r\n                        <MyTextInput placeholder='City' name='city'/>\r\n                        <MyTextInput placeholder='Venue' name='venue'/>\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} \r\n                            floated='right' positive type='submit' content='Submit'   />\r\n                        <Button floated='right' positive type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as  Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string\r\n}\r\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\r\n    const {commentStore} = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.creareHubConnection(activityId);\r\n        }\r\n\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Comment.Group>\r\n                <Formik\r\n                        onSubmit={(values, {resetForm}) =>\r\n                            commentStore.addComment(values).then(() => resetForm())}\r\n                        initialValues={{body: ''}}\r\n                        validationSchema={ \r\n                            Yup.object({\r\n                                body: Yup.string().required()\r\n                        })}\r\n                        \r\n                    >\r\n                        {({isSubmitting, isValid, handleSubmit}) => (\r\n                            <Form className='ui form'>\r\n                                <Field name='body'>\r\n                                    {(props: FieldProps) => (\r\n                                        <div style={{position: 'relative'}}>\r\n                                            <Loader active={isSubmitting} />\r\n                                            <textarea\r\n                                                placeholder='Enter your comment (Enter to submit, SHIFt + enter for new line)'\r\n                                                rows={2}\r\n                                                {...props.field}\r\n                                                onKeyPress={e => {\r\n                                                    if (e.key == \"Enter\" && e.shiftKey){\r\n                                                        return;\r\n                                                    }\r\n                                                    if (e.key == \"Enter\" && !e.shiftKey){\r\n                                                        e.preventDefault();\r\n                                                        isValid && handleSubmit()\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>                    \r\n                    {commentStore.comments.map (comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'}/>\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                                <Comment.Actions>\r\n                                    <Comment.Action>Reply</Comment.Action>\r\n                                </Comment.Actions>\r\n                            </Comment.Content>\r\n                        </Comment>                       \r\n                    ))}\r\n\r\n\r\n\r\n   \r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && \r\n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} \r\n                    ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link> </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button \r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content = {activity.isCancelled ? 'Re-activated Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                         />\r\n                        <Button as={Link}\r\n                             disabled={activity.isCancelled}\r\n                             to={`/activities/activityEdit/${activity.id}`} \r\n                             color='orange' \r\n                             floated='right' >\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n\r\n                ): activity.isGoing ? (\r\n                    <Button onClick={updateAttendance} loading={loading}>Cancel attendance</Button>\r\n                ): (\r\n                    <Button color='teal' \r\n                        disabled={activity.isCancelled} \r\n                        onClick={updateAttendance} \r\n                        loading={loading}>Join Activity\r\n                    </Button>\r\n                )}\r\n\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n\r\n\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                        {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\r\n    if (!attendees) return null;\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username && \r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            }\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                                }\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n\r\n\r\n\r\n\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/loadinComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\nexport default observer( function  ActivityDetails() {\r\n  const {activityStore} = useStore();\r\n  const {selectedActivity: activity, loadingInitial, loadActivity, clearSelectedActivity  } = activityStore;\r\n  const {id} = useParams<{id: string}>();\r\n\r\n  useEffect(()=>{\r\n    if (id) loadActivity(id);\r\n    return () => clearSelectedActivity();\r\n  }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n  if (loadingInitial || !activity) return <LoadingComponent/>\r\n\r\n  return (\r\n    <Grid>\r\n        <Grid.Column width={10}>\r\n          <ActivityDetailedHeader activity={activity}/>\r\n          <ActivityDetailedInfo activity={activity}/>\r\n          <ActivityDetailedChat activityId={activity.id} />\r\n        </Grid.Column>\r\n        <Grid.Column width={6}>\r\n          <ActivityDetailedSidebar activity={activity!} />\r\n        </Grid.Column>\r\n    </Grid>\r\n  );\r\n \r\n})\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        //axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n        axios.get(baseUrl + 'buggy/not-found').catch();\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound(){\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name=\"search\" />\r\n                Opps - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page.\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function SeerverError(){\r\n    const {commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color=\"red\" content= {commonStore.error?.message} />\r\n            {commonStore.error?.details && \r\n                <Segment>\r\n                    <Header as='h4' content='Stack Trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}} >{commonStore.error?.details}</code>\r\n                    \r\n                </Segment>    \r\n            }\r\n        </Container>\r\n    )\r\n})\r\n\r\n\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function ModalContiner(){\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { Button, Form, Segment } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport * as Yup from \"yup\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Prop {\r\n  setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default function ProfileEditForm({ setEditMode }: Prop) {\r\n  const {\r\n    profileStore: { profile, updateProfile },\r\n  } = useStore();\r\n\r\n  return (\r\n    <Segment clearing>\r\n      <Formik\r\n        validationSchema={Yup.object({\r\n          displayName: Yup.string().required(),\r\n        })}\r\n        enableReinitialize\r\n        initialValues={{ displayName: profile?.displayName, bio: profile?.bio }}\r\n        onSubmit={(values) => {\r\n          updateProfile(values).then(() => {\r\n            setEditMode(false);\r\n          });\r\n        }}\r\n      >\r\n        {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n          <Form\r\n            className=\"ui form\"\r\n            onSubmit={handleSubmit}\r\n            autoComplete=\"false\"\r\n          >\r\n            <MyTextInput name=\"displayName\" placeholder=\"Display Name\" />\r\n            <MyTextArea rows={3} placeholder=\"Bio\" name=\"bio\" />\r\n            <Button\r\n              disabled={isSubmitting || !dirty || !isValid}\r\n              loading={isSubmitting}\r\n              floated=\"right\"\r\n              positive\r\n              type=\"submit\"\r\n              content=\"Update profile\"\r\n            />\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Segment>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileEditForm from \"./ProfilEditForm\";\r\n\r\ninterface Prop{\r\n    profile: Profile\r\n}\r\n\r\nexport default function ProfileAbout({profile}: Prop) {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const {profileStore: { isCurrentUser }  } = useStore();\r\n\r\n  return (\r\n    <Tab.Pane>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n        <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n          {isCurrentUser && (\r\n            <Button\r\n              floated=\"right\"\r\n              basic\r\n              content={editMode ? \"Cancel\" : \"Edit Profile\"}\r\n              onClick={() => setEditMode(!editMode)}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={16} >\r\n                    {editMode ? \r\n                        <ProfileEditForm setEditMode={setEditMode} />\r\n                     :\r\n                        <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>\r\n                    }\r\n        </Grid.Column>       \r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n}\r\n","import { format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Grid, Header, Image, Tab, TabProps } from \"semantic-ui-react\";\r\nimport { UserActivity } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    {menuItem: 'Future Events', pane: {key: 'future'}},\r\n    {menuItem: 'Past Events', pane: {key: 'past'}},\r\n    {menuItem: 'Hostings', pane: {key: 'hosting'}}\r\n]\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const {profileStore} = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key)\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated=\"left\" icon='calender' content={'Activities'}/>\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab \r\n                        panes={panes}\r\n                        menu={{secondary: true, pointing: true}}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{minHeight: 100, objectFit: 'cover'}} \r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign=\"center\">{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign=\"center\">\r\n                                        <div>{format(new Date(activity.date), 'do LL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer(function ProfileFollowings(){\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid >\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                    floated=\"left\" \r\n                    icon='user' \r\n                    content={ activeTab == 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`}/>\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n\r\n})","import React from \"react\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props){\r\n    return (\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(acceptedFiles.map((file:any) => Object.assign(file, {\r\n        preview: URL.createObjectURL(file)\r\n    })) )\r\n  }, [setFiles])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : {...dzStyles}}>\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge' />\r\n      <Header content='Drop size here' />\r\n    </div>\r\n  )\r\n}","import React, { useState } from \"react\";\r\nimport { Button, ButtonGroup, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props){\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     return () => {\r\n    //         files.foreach((file: any) => URL.revokeObjectURL(file.preview))\r\n    //     }\r\n    // }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4} >\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4} >\r\n                <Header sub color='teal' content='Step 2 - Resize Image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4} >\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                <>\r\n                <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}} />\r\n                {files && files.length > 0 && (\r\n                    <ButtonGroup widths={2}>\r\n                        <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                        <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                    </ButtonGroup>\r\n                )}\r\n\r\n                </>\r\n            </Grid.Column>                        \r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Button, ButtonGroup, Card, Grid, Header, Image, Tab } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props{\r\n    profile: Profile\r\n}\r\nexport default observer(function ProfilePhotos({profile}: Props) {\r\n    const {profileStore: {isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto }} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto (photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto (photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16} >\r\n                    <Header icon='image' content='photos' floated=\"left\" />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic content={addPhotoMode ? 'Cancel' : 'Add Photo'} \r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}/>\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16} >\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading}/>\r\n                    ) :\r\n                    (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url}/>\r\n                                    {isCurrentUser && (\r\n                                        <ButtonGroup fluid widths={2} >\r\n                                            <Button \r\n                                                basic\r\n                                                color=\"green\"\r\n                                                content='Main'\r\n                                                name = {\"Main\" + photo.id}\r\n                                                disabled = {photo.isMain}\r\n                                                loading={(target === \"Main\" + photo.id) && loading}\r\n                                                onClick = {e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button \r\n                                             loading={(target === photo.id) && loading}\r\n                                             disabled = {photo.isMain}\r\n                                            basic color=\"red\" \r\n                                            icon='trash'\r\n                                            name = {photo.id}\r\n                                            onClick={e => handleDeletePhoto(photo, e)}/>\r\n                                        </ButtonGroup>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n           \r\n\r\n        </Tab.Pane>\r\n    )\r\n})","import React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props{\r\n    profile: Profile\r\n}\r\n\r\nexport default function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout profile={profile} />},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: () => <ProfileActivities />},\r\n        {menuItem: 'Folllowers', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Following', render: () =>  <ProfileFollowings />}\r\n    ]\r\n\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActivetab(data.activeIndex)}\r\n        />\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\nexport default observer(function ProfileHeader({profile}: Props)\r\n{\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size=\"small\" src={profile.image || `/assets/user.png`} />\r\n                            <Item.Content verticalAlign=\"middle\"  >\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4} >\r\n                    <Statistic.Group widths={2} >\r\n                        <Statistic label=\"Followers\" value={profile.followersCount} />\r\n                        <Statistic label=\"Following\" value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadProfile, profile, setActivetab} = profileStore;\r\n\r\n    useEffect(() =>  {\r\n        loadProfile(username!);\r\n        return () => {\r\n            setActivetab(0);\r\n        }\r\n    }, [loadProfile, username, setActivetab])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile && \r\n                <>\r\n                    <ProfileHeader profile={profile} />\r\n                    <ProfileContent profile={profile} />\r\n                </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, { useEffect } from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Navigate, Outlet, Route, Routes, useLocation } from 'react-router-dom';\r\nimport HomePage from '../../features/activities/home/HomePage';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport TestErrors from '../../features/errors/TestError';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport LoginForm from '../../features/users/LoginForm';\r\nimport { useStore } from '../stores/store';\r\nimport LoadingComponent from './loadinComponent';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/PrifilePage';\r\n\r\nfunction PrivateOutlet() {\r\n  const{userStore: {isLoggedIn}} = useStore();\r\n  return isLoggedIn ? <Outlet /> : <Navigate to=\"/\" />;\r\n}\r\n\r\nfunction App() {\r\n  const {commonStore, userStore} = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token){\r\n      userStore.getUser().finally(()=> commonStore.setApploaded())\r\n    }else{\r\n      commonStore.setApploaded();\r\n    }\r\n  },[commonStore, userStore])\r\n\r\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\r\n  return (\r\n    <>\r\n      <ModalContainer />\r\n      <Routes >\r\n        <Route path='/' element={<HomePage />}></Route>\r\n         <Route path={'activities/*'} element={<LoadActivities /> } /> \r\n         {/* <Route path={'activities/*'} element={<PrivateOutlet /> } >\r\n          <Route element={<LoadActivities />} />\r\n        </Route>  */}\r\n        <Route path={'/login'} element={<LoadLogin /> } />\r\n        <Route path={'/*'} element={<OtherRouters />}></Route>\r\n      </Routes>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction LoadLogin(){\r\n  return (\r\n    <>\r\n      <ToastContainer position='bottom-right' hideProgressBar/>\r\n      <NavBar/>\r\n      <Container style={{marginTop: '7em'}}>\r\n          {\r\n          <Routes >\r\n              <Route path='/'  element={<LoginForm />} ></Route>\r\n            </Routes> \r\n          }\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nfunction LoadActivities(){\r\n  const location = useLocation();\r\n  return (\r\n    <>\r\n      <ToastContainer position='bottom-right' hideProgressBar/>\r\n      <NavBar/>\r\n      <Container style={{marginTop: '7em'}}>\r\n          {\r\n          <Routes >\r\n              <Route path='/'   element={<ActivityDashboard /> } ></Route>\r\n              <Route path=':id' element={<ActivityDetails />} ></Route>\r\n              <Route path='/activityEdit' element={<ActivityForm />}>\r\n                <Route key={location.key}  path=':id' element={<ActivityForm />} ></Route> \r\n              </Route>\r\n              <Route path={'/login'} element={<LoginForm /> } />\r\n\r\n            </Routes> \r\n          }\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nfunction OtherRouters(){\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer position='bottom-right' hideProgressBar/>\r\n      <NavBar/>\r\n      <Container style={{marginTop: '7em'}}>\r\n          {\r\n            <Routes location={location}>\r\n              <Route path='/profiles/:username' element={<ProfilePage />} ></Route>\r\n              <Route path='/errors' element={<TestErrors />} ></Route>\r\n              <Route path='/server-error' element={<ServerError />} ></Route>\r\n              <Route path='/*' element={<NotFound />} ></Route>\r\n            </Routes> \r\n          }\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React, { useLayoutEffect, useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport './app/layout/styles.css';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport { createBrowserHistory } from \"history\";\r\nimport { BrowserRouter, Router } from 'react-router-dom';\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\n\r\nexport const history  = createBrowserHistory();\r\n\r\n\r\n\r\nconst CustomRouter = (history: any, ...props: any) => {\r\n  const [state, setState] = useState({\r\n    action: history.action,\r\n    location: history.location\r\n  });\r\n\r\n  useLayoutEffect(() => history.listen(setState), [history]);\r\n\r\n  return (\r\n    <Router\r\n      {...props}\r\n      location={state.location}\r\n      navigationType={state.action}\r\n      navigator={history}\r\n    />\r\n  );\r\n};\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StoreContext.Provider value={store}>\r\n      <BrowserRouter>\r\n        <ScrollToTop/>\r\n        <App />\r\n      </BrowserRouter>\r\n    </StoreContext.Provider>\r\n   \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}